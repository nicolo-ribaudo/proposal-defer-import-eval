<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Deferred Imports Evaluation Algorithm
stage: -1
contributors: Nicol√≤ Ribaudo
</pre>

<emu-clause id="sec-ordinary-and-exotic-objects-behaviours" number="10">
  <h1>Ordinary and Exotic Objects Behaviours</h1>

  <emu-clause id="sec-built-in-exotic-object-internal-methods-and-slots" number="4">
    <h1>Built-in Exotic Object Internal Methods and Slots</h1>
    <p>This specification defines several kinds of built-in exotic objects. These objects generally behave similar to ordinary objects except for a few specific situations. The following exotic objects use the ordinary object internal methods except where it is explicitly specified otherwise below:</p>

    <emu-clause id="sec-module-namespace-exotic-objects" number="6">
      <h1>Module Namespace Exotic Objects</h1>
      <p>A module namespace exotic object is an exotic object that exposes the bindings exported from an ECMAScript |Module| (See <emu-xref href="#sec-exports"></emu-xref>). There is a one-to-one correspondence between the String-keyed own properties of a module namespace exotic object and the binding names exported by the |Module|. The exported bindings include any bindings that are indirectly exported using `export *` export items. Each String-valued own property key is the StringValue of the corresponding exported binding name. These are the only String-keyed properties of a module namespace exotic object. Each such property has the attributes { [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *false* }. Module namespace exotic objects are not extensible.</p>
      <p>An object is a <dfn id="module-namespace-exotic-object" variants="module namespace exotic objects">module namespace exotic object</dfn> if its [[GetPrototypeOf]], [[SetPrototypeOf]], [[IsExtensible]], [[PreventExtensions]], [[GetOwnProperty]], [[DefineOwnProperty]], [[HasProperty]], [[Get]], [[Set]], [[Delete]], and [[OwnPropertyKeys]] internal methods use the definitions in this section, and its other essential internal methods use the definitions found in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"></emu-xref>. These methods are installed by ModuleNamespaceCreate.</p>
      <p>Module namespace exotic objects have the internal slots defined in <emu-xref href="#table-internal-slots-of-module-namespace-exotic-objects"></emu-xref>.</p>
      <emu-table id="table-internal-slots-of-module-namespace-exotic-objects" caption="Internal Slots of Module Namespace Exotic Objects" oldids="table-29">
        <table>
          <tr>
            <th>
              Internal Slot
            </th>
            <th>
              Type
            </th>
            <th>
              Description
            </th>
          </tr>
          <tr>
            <td>
              [[Module]]
            </td>
            <td>
              a Module Record
            </td>
            <td>
              The Module Record whose exports this namespace exposes.
            </td>
          </tr>
          <tr>
            <td>
              [[Exports]]
            </td>
            <td>
              a List of Strings
            </td>
            <td>
              A List whose elements are the String values of the exported names exposed as own properties of this object. The list is ordered as if an Array of those String values had been sorted using %Array.prototype.sort% using *undefined* as _comparefn_.
            </td>
          </tr>
        </table>
      </emu-table>

      <emu-clause id="sec-module-namespace-exotic-objects-get-p-receiver" type="internal method" number="8">
        <h1>
          [[Get]] (
            _P_: a property key,
            _Receiver_: an ECMAScript language value,
          ): either a normal completion containing an ECMAScript language value or a throw completion
        </h1>
        <dl class="header">
          <dt>for</dt>
          <dd>a module namespace exotic object _O_</dd>
        </dl>
        <emu-alg>
          1. If _P_ is a Symbol, then
            1. Return ! OrdinaryGet(_O_, _P_, _Receiver_).
          1. Let _exports_ be _O_.[[Exports]].
          1. If _exports_ does not contain _P_, return *undefined*.
          1. Let _m_ be _O_.[[Module]].
          1. <ins>TODO: The following assertion is probably not true if this [[Get]] happens while evaluating a module.</ins>
          1. <ins>Assert: _m_.[[Status]] is ~async-subgraphs-evaluated~ or ~evaluated~.</ins>
          1. <ins>If _m_.[[Status]] is ~async-subgraphs-evaluated~, then</ins>
            1. <ins>Let _promise_ be _m_.Evaluate().</ins>
            1. <ins>Assert: _promise_.[[PromiseState]] is either ~fulfilled~ or ~rejected~, because all of _m_'s asynchronous dependencies have already been evaluated.</ins>
            1. <ins>If _promise_.[[PromiseState]] is ~rejected~, then</ins>
              1. <ins>Return ThrowCompletion(_promise_.[[PromiseResult]]).</ins>
          1. Let _binding_ be _m_.ResolveExport(_P_).
          1. Assert: _binding_ is a ResolvedBinding Record.
          1. Let _targetModule_ be _binding_.[[Module]].
          1. Assert: _targetModule_ is not *undefined*.
          1. If _binding_.[[BindingName]] is ~namespace~, then
            1. Return GetModuleNamespace(_targetModule_).
          1. Let _targetEnv_ be _targetModule_.[[Environment]].
          1. If _targetEnv_ is ~empty~, throw a *ReferenceError* exception.
          1. Return ? _targetEnv_.GetBindingValue(_binding_.[[BindingName]], *true*).
        </emu-alg>
        <emu-note>
          <p>ResolveExport is side-effect free. Each time this operation is called with a specific _exportName_, _resolveSet_ pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each module namespace exotic object.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-ecmascript-language-scripts-and-modules" number="16">
  <h1>ECMAScript Language: Scripts and Modules</h1>

  <emu-clause id="sec-modules" number="2">
    <h1>Modules</h1>
    <h2>Syntax</h2>
    <emu-grammar type="definition">
      Module :
        ModuleBody?

      ModuleBody :
        ModuleItemList

      ModuleItemList :
        ModuleItem
        ModuleItemList ModuleItem

      ModuleItem :
        ImportDeclaration
        ExportDeclaration
        StatementListItem[~Yield, +Await, ~Return]

      ModuleExportName :
        IdentifierName
        StringLiteral
    </emu-grammar>

    <emu-clause id="sec-module-semantics">
      <h1>Module Semantics</h1>

      <emu-clause id="sec-modulerequest-record">
        <h1><ins>ModuleRequest Records</ins></h1>

        <p>A <dfn id="modulerequest-record" variants="ModuleRequest Records">ModuleRequest Record</dfn> represents the request to import a module up to a given phase. It consists of the following fields:</p>
        <emu-table id="table-modulerequest-fields" caption="ModuleRequest Record fields">
          <table>
            <tbody>
              <tr>
                <th>
                  Field Name
                </th>
                <th>
                  Value Type
                </th>
                <th>
                  Meaning
                </th>
              </tr>
              <tr>
                <td>
                  [[Specifier]]
                </td>
                <td>
                  String
                </td>
                <td>
                  The module specifier
                </td>
              </tr>
              <tr>
                <td>
                  [[Phase]]
                </td>
                <td>
                  ~defer~ or ~full~
                </td>
                <td>
                  The target import phase
                </td>
              </tr>
            </tbody>
          </table>
        </emu-table>

        <emu-note type="editor">In general, this proposal replaces places where module specifiers are passed around with ModuleRequest Records. For example, several syntax-directed operations, such as ModuleRequests produce Lists of ModuleRequest Records rather than Lists of Strings which are interpreted as module specifiers. Some algorithms like ImportEntries and ImportEntriesForModule pass around ModuleRequest Records rather than Strings, in a way which doesn't require any particular textual change. Additionally, record fields in Cyclic Module Records and Source Text Module Records which contained Lists of Strings are replaced by Lists of ModuleRequest Records, as indicated above.</emu-note>
      </emu-clause>

      <emu-clause id="sec-static-semantics-modulerequests" type="sdo" number="3">
        <h1>
          Static Semantics: ModuleRequests ( ): a List of <del>Strings</del><ins>ModuleRequest Records</ins>
        </h1>
        <dl class="header">
        </dl>
        <emu-grammar>Module : [empty]</emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
        <emu-grammar>ModuleItemList : ModuleItem</emu-grammar>
        <emu-alg>
          1. Return ModuleRequests of |ModuleItem|.
        </emu-alg>
        <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>
        <emu-alg>
          1. Let <del>_moduleNames_</del><ins>_requests_</ins> be ModuleRequests of |ModuleItemList|.
          1. Let <del>_additionalNames_</del><ins>_additionalRequests_</ins> be ModuleRequests of |ModuleItem|.
          1. <del>For each String _name_ of _additionalNames_, do</del>
          1. <ins>For each ModuleRequest Record _mr_ of _additionalRequests_, do</ins>
            1. <ins>Let _found_ be *false*.</ins>
            1. <ins>For each ModuleRequest Record _mr2_ of _requests_, do</ins>
              1. <ins>If _mr_.[[Specifer]] is _mr2_.[[Specifer]], then</ins>
                1. <ins>Assert: _found_ is *false*.</ins>
                1. <ins>Set _found_ to *true*.</ins>
                1. <ins>If _mr2_.[[Phase]] is ~defer~ and _mr_.[[Phase]] is ~full~, set _mr2_.[[Phase]] to ~full~.</ins>
            1. <del>If _moduleNames_ does not contain _name_, then</del>
            1. <ins>If _found_ is *false*, then</ins>
              1. Append <del>_name_</del><ins>_mr_</ins> to <del>_moduleNames_</del><ins>_requests_</ins>.
          1. Return <del>_moduleNames_</del><ins>_requests_</ins>.
        </emu-alg>
        <emu-grammar>ModuleItem : StatementListItem</emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
        <emu-grammar>
          ImportDeclaration : `import` ImportClause FromClause `;`
        </emu-grammar>
        <emu-alg>
          1. <del>Return ModuleRequests of |FromClause|.</del>
          1. <ins>Let _specifier_ be SV of |FromClause|.</ins>
          1. <ins>Return a List whose sole element is the ModuleRequest Record { [[Specifer]]: _specifier_, [[Phase]]: ~full~ }.</ins>
        </emu-alg>
        <emu-grammar>
          <ins>ImportDeclaration : `import` `defer` ImportClause FromClause `;`</ins>
        </emu-grammar>
        <emu-alg>
          1. <ins>Let _specifier_ be SV of |FromClause|.</ins>
          1. <ins>Return a List whose sole element is the ModuleRequest Record { [[Specifer]]: _specifier_, [[Phase]]: ~defer~ }.</ins>
        </emu-alg>
        <emu-grammar><del>ModuleSpecifier : StringLiteral</del></emu-grammar>
        <emu-alg>
          1. <del>Return a List whose sole element is the SV of |StringLiteral|.</del>
        </emu-alg>
        <emu-grammar>
          ExportDeclaration : `export` ExportFromClause FromClause `;`
        </emu-grammar>
        <emu-alg>
          1. <del>Return ModuleRequests of |FromClause|.</del>
          1. <ins>Let _specifier_ be SV of |FromClause|.</ins>
          1. <ins>Return a List whose sole element is the ModuleRequest Record { [[Specifer]]: _specifier_, [[Phase]]: ~full~ }.</ins>
        </emu-alg>
        <emu-grammar>
          ExportDeclaration :
            `export` NamedExports `;`
            `export` VariableStatement
            `export` Declaration
            `export` `default` HoistableDeclaration
            `export` `default` ClassDeclaration
            `export` `default` AssignmentExpression `;`
        </emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-cyclic-module-records" number="5">
        <h1>Cyclic Module Records</h1>
        <p>A <dfn id="cyclic-module-record" variants="Cyclic Module Records">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the Cyclic Module Record type. Module Records that are not subclasses of the Cyclic Module Record type must not participate in dependency cycles with Source Text Module Records.</p>
        <p>In addition to the fields defined in <emu-xref href="#table-module-record-fields"></emu-xref> Cyclic Module Records have the additional fields listed in <emu-xref href="#table-cyclic-module-fields"></emu-xref></p>
        <emu-table id="table-cyclic-module-fields" caption="Additional Fields of Cyclic Module Records">
          <table>
            <tr>
              <th>
                Field Name
              </th>
              <th>
                Value Type
              </th>
              <th>
                Meaning
              </th>
            </tr>
            <tr>
              <td>
                [[Status]]
              </td>
              <td>
                ~new~, ~unlinked~, ~linking~, ~linked~, ~async-subgraphs-searching~, ~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~, ~evaluating~, ~evaluating-async~, or ~evaluated~
              </td>
              <td>
                Initially ~new~. Transitions to ~unlinked~, ~linking~, ~linked~, <ins>possibly to ~async-subgraphs-searching~, ~async-subgraphs-evaluating-async~ and ~async-subgraphs-evaluated~, then to</ins> ~evaluating~, possibly ~evaluating-async~, ~evaluated~ (in that order) as the module progresses throughout its lifecycle. ~evaluating-async~ indicates this module is queued to execute on completion of its asynchronous dependencies or it is a module whose [[HasTLA]] field is *true* that has been executed and is pending top-level completion.
              </td>
            </tr>
            <tr>
              <td>
                [[EvaluationError]]
              </td>
              <td>
                a throw completion or ~empty~
              </td>
              <td>
                A throw completion representing the exception that occurred during evaluation. *undefined* if no exception occurred or if [[Status]] is not ~evaluated~.
              </td>
            </tr>
            <tr>
              <td>
                [[DFSIndex]]
              </td>
              <td>
                an integer or ~empty~
              </td>
              <td>
                Auxiliary field used during Link and Evaluate only. If [[Status]] is either ~linking~ or ~evaluating~, this non-negative number records the point at which the module was first visited during the depth-first traversal of the dependency graph.
              </td>
            </tr>
            <tr>
              <td>
                [[DFSAncestorIndex]]
              </td>
              <td>
                an integer or ~empty~
              </td>
              <td>
                Auxiliary field used during Link and Evaluate only. If [[Status]] is either ~linking~ or ~evaluating~, this is either the module's own [[DFSIndex]] or that of an "earlier" module in the same strongly connected component.
              </td>
            </tr>
            <tr>
              <td>
                [[RequestedModules]]
              </td>
              <td>
                a List of <del>Strings</del><ins>ModuleRequest Records</ins>
              </td>
              <td>
                A List of all the |ModuleSpecifier| strings used by the module represented by this record to request the importation of a module, <ins>alongside with their maximum specified import phase (~defer~ or ~full~)</ins>. The List is in source text occurrence order.
              </td>
            </tr>
            <tr>
              <td>
                [[LoadedModules]]
              </td>
              <td>
                a List of Records with fields [[Specifier]] (a String) and [[Module]] (a Module Record)
              </td>
              <td>
                A map from the specifier strings used by the module represented by this record to request the importation of a module to the resolved Module Record. The list does not contain two different Records with the same [[Specifier]].
              </td>
            </tr>
            <tr>
              <td>
                [[CycleRoot]]
              </td>
              <td>
                a Cyclic Module Record or ~empty~
              </td>
              <td>
                The first visited module of the cycle, the root DFS ancestor of the strongly connected component. For a module not in a cycle, this would be the module itself. Once Evaluate has completed, a module's [[DFSAncestorIndex]] is the [[DFSIndex]] of its [[CycleRoot]].
              </td>
            </tr>
            <tr>
              <td>
                [[HasTLA]]
              </td>
              <td>
                a Boolean
              </td>
              <td>
                Whether this module is individually asynchronous (for example, if it's a Source Text Module Record containing a top-level await). Having an asynchronous dependency does not mean this field is *true*. This field must not change after the module is parsed.
              </td>
            </tr>
            <tr>
              <td>
                [[AsyncEvaluation]]
              </td>
              <td>
                a Boolean
              </td>
              <td>
                Whether this module is either itself asynchronous or has an asynchronous dependency. Note: The order in which this field is set is used to order queued executions, see <emu-xref href="#sec-async-module-execution-fulfilled"></emu-xref>.
              </td>
            </tr>
            <tr>
              <td>
                [[TopLevelCapability]]
              </td>
              <td>
                a PromiseCapability Record or ~empty~
              </td>
              <td>
                If this module is the [[CycleRoot]] of some cycle, and Evaluate() was called on some module in that cycle, this field contains the PromiseCapability Record for that entire evaluation. It is used to settle the Promise object that is returned from the Evaluate() abstract method. This field will be ~empty~ for any dependencies of that module, unless a top-level Evaluate() has been initiated for some of those dependencies.
              </td>
            </tr>
            <tr>
              <td>
                [[AsyncParentModules]]
              </td>
              <td>
                a List of Cyclic Module Records
              </td>
              <td>
                If this module or a dependency has [[HasTLA]] *true*, and execution is in progress, this tracks the parent importers of this module for the top-level execution job. These parent modules will not start executing before this module has successfully completed execution.
              </td>
            </tr>
            <tr>
              <td>
                [[PendingAsyncDependencies]]
              </td>
              <td>
                an integer or ~empty~
              </td>
              <td>
                If this module has any asynchronous dependencies, this tracks the number of asynchronous dependency modules remaining to execute for this module. A module with asynchronous dependencies will be executed when this field reaches 0 and there are no execution errors.
              </td>
            </tr>
          </table>
        </emu-table>
        <p>In addition to the methods defined in <emu-xref href="#table-abstract-methods-of-module-records"></emu-xref> Cyclic Module Records have the additional methods listed in <emu-xref href="#table-cyclic-module-methods"></emu-xref></p>
        <emu-table id="table-cyclic-module-methods" caption="Additional Abstract Methods of Cyclic Module Records">
          <table>
            <tr>
              <th>
                Method
              </th>
              <th>
                Purpose
              </th>
            </tr>
            <tr>
              <td>
                InitializeEnvironment()
              </td>
              <td>
                Initialize the Environment Record of the module, including resolving all imported bindings, and create the module's execution context.
              </td>
            </tr>
            <tr>
              <td>
                ExecuteModule( [ _promiseCapability_ ] )
              </td>
              <td>
                Evaluate the module's code within its execution context. If this module has *true* in [[HasTLA]], then a PromiseCapability Record is passed as an argument, and the method is expected to resolve or reject the given capability. In this case, the method must not throw an exception, but instead reject the PromiseCapability Record if necessary.
              </td>
            </tr>
          </table>
        </emu-table>

        <p>A <dfn id="graphloadingstate-record" variants="GraphLoadingState Records">GraphLoadingState Record</dfn> is a Record that contains information about the loading process of a module graph. It's used to continue loading after a call to HostLoadImportedModule. Each GraphLoadingState Record has the fields defined in <emu-xref href="#table-graphloadingstate-record-fields"></emu-xref>:</p>
        <emu-table id="table-graphloadingstate-record-fields" caption="GraphLoadingState Record Fields">
          <table>
            <tr>
              <th>
                Field Name
              </th>
              <th>
                Value Type
              </th>
              <th>
                Meaning
              </th>
            </tr>
            <tr>
              <td>
                [[PromiseCapability]]
              </td>
              <td>
                a PromiseCapability Record
              </td>
              <td>
                The promise to resolve when the loading process finishes.
              </td>
            </tr>
            <tr>
              <td>
                [[IsLoading]]
              </td>
              <td>
                a Boolean
              </td>
              <td>
                It is true if the loading process has not finished yet, neither successfully nor with an error.
              </td>
            </tr>
            <tr>
              <td>
                [[PendingModulesCount]]
              </td>
              <td>
                a non-negative integer
              </td>
              <td>
                It tracks the number of pending HostLoadImportedModule calls.
              </td>
            </tr>
            <tr>
              <td>
                [[Visited]]
              </td>
              <td>
                a List of Cyclic Module Records
              </td>
              <td>
                It is a list of the Cyclic Module Records that have been already loaded by the current loading process, to avoid infinite loops with circular dependencies.
              </td>
            </tr>
            <tr>
              <td>
                [[HostDefined]]
              </td>
              <td>
                anything (default value is ~empty~)
              </td>
              <td>
                It contains host-defined data to pass from the LoadRequestedModules caller to HostLoadImportedModule.
              </td>
            </tr>
          </table>
        </emu-table>

        <emu-clause id="sec-LoadRequestedModules" type="concrete method">
          <h1>
            LoadRequestedModules (
              optional _hostDefined_: anything,
            ): a Promise
          </h1>
          <dl class="header">
            <dt>for</dt>
            <dd>a Cyclic Module Record _module_</dd>

            <dt>description</dt>
            <dd>It populates the [[LoadedModules]] of all the Module Records in the dependency graph of _module_ (most of the work is done by the auxiliary function InnerModuleLoading). It takes an optional _hostDefined_ parameter that is passed to the HostLoadImportedModule hook.</dd>
          </dl>

          <emu-alg>
            1. If _hostDefined_ is not present, let _hostDefined_ be ~empty~.
            1. Let _pc_ be ! NewPromiseCapability(%Promise%).
            1. Let _state_ be the GraphLoadingState Record { [[IsLoading]]: *true*, [[PendingModulesCount]]: 1, [[Visited]]: ¬´ ¬ª, [[PromiseCapability]]: _pc_, [[HostDefined]]: _hostDefined_ }.
            1. Perform InnerModuleLoading(_state_, _module_).
            1. Return _pc_.[[Promise]].
          </emu-alg>

          <emu-note>
            The _hostDefined_ parameter can be used to pass additional information necessary to fetch the imported modules. It is used, for example, by HTML to set the correct fetch destination for <code>&lt;link rel="preload" as="..."&gt;</code> tags.
            <code>import()</code> expressions never set the _hostDefined_ parameter.
          </emu-note>

          <emu-clause id="sec-InnerModuleLoading" type="abstract operation">
            <h1>
              InnerModuleLoading (
                _state_: a GraphLoadingState Record,
                _module_: a Module Record,
              ): ~unused~
            </h1>
            <dl class="header">
              <dt>description</dt>
              <dd>It is used by LoadRequestedModules to recursively perform the actual loading process for _module_'s dependency graph.</dd>
            </dl>

            <emu-alg>
              1. Assert: _state_.[[IsLoading]] is *true*.
              1. If _module_ is a Cyclic Module Record, _module_.[[Status]] is ~new~, and _state_.[[Visited]] does not contain _module_, then
                1. Append _module_ to _state_.[[Visited]].
                1. Let _requestedModulesCount_ be the number of elements in _module_.[[RequestedModules]].
                1. Set _state_.[[PendingModulesCount]] to _state_.[[PendingModulesCount]] + _requestedModulesCount_.
                1. <del>For each String _required_ of _module_.[[RequestedModules]], do</del>
                1. <ins>For each ModuleRequest Record _required_ of _module_.[[RequestedModules]], do</ins>
                  1. <ins>Let _specifier_ be _required_.[[Specifier]].</ins>
                  1. If _module_.[[LoadedModules]] contains a Record whose [[Specifier]] is <del>_required_</del><ins>_specifier_</ins>, then
                    1. Let _record_ be that Record.
                    1. Perform InnerModuleLoading(_state_, _record_.[[Module]]).
                  1. Else,
                    1. Perform HostLoadImportedModule(_module_, <del>_required_</del><ins>_specifier_</ins>, _state_.[[HostDefined]], _state_).
                    1. NOTE: HostLoadImportedModule will call FinishLoadingImportedModule, which re-enters the graph loading process through ContinueModuleLoading.
                  1. If _state_.[[IsLoading]] is *false*, return ~unused~.
              1. Assert: _state_.[[PendingModulesCount]] ‚â• 1.
              1. Set _state_.[[PendingModulesCount]] to _state_.[[PendingModulesCount]] - 1.
              1. If _state_.[[PendingModulesCount]] = 0, then
                1. Set _state_.[[IsLoading]] to *false*.
                1. For each Cyclic Module Record _loaded_ of _state_.[[Visited]], do
                  1. If _loaded_.[[Status]] is ~new~, set _loaded_.[[Status]] to ~unlinked~.
                1. Perform ! Call(_state_.[[PromiseCapability]].[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).
              1. Return ~unused~.
            </emu-alg>
          </emu-clause>

          <emu-clause id="sec-ContinueModuleLoading" type="abstract operation">
            <h1>
              ContinueModuleLoading (
                _state_: a GraphLoadingState Record,
                _moduleCompletion_: either a normal completion containing a Module Record or a throw completion,
              ): ~unused~
            </h1>
            <dl class="header">
              <dt>description</dt>
              <dd>It is used to re-enter the loading process after a call to HostLoadImportedModule.</dd>
            </dl>

            <emu-alg>
              1. If _state_.[[IsLoading]] is *false*, return ~unused~.
              1. If _moduleCompletion_ is a normal completion, then
                1. Perform InnerModuleLoading(_state_, _moduleCompletion_.[[Value]]).
              1. Else,
                1. Set _state_.[[IsLoading]] to *false*.
                1. Perform ! Call(_state_.[[PromiseCapability]].[[Reject]], *undefined*, ¬´ _moduleCompletion_.[[Value]] ¬ª).
              1. Return ~unused~.
            </emu-alg>
          </emu-clause>
        </emu-clause>

        <emu-clause id="sec-moduledeclarationlinking" type="concrete method" oldids="sec-moduledeclarationinstantiation">
          <h1>Link ( ): either a normal completion containing ~unused~ or a throw completion</h1>
          <dl class="header">
            <dt>for</dt>
            <dd>a Cyclic Module Record _module_</dd>

            <dt>description</dt>
            <dd>On success, Link transitions this module's [[Status]] from ~unlinked~ to ~linked~. On failure, an exception is thrown and this module's [[Status]] remains ~unlinked~. (Most of the work is done by the auxiliary function InnerModuleLinking.)</dd>
          </dl>

          <emu-alg>
            1. Assert: _module_.[[Status]] is one of ~unlinked~, ~linked~, <ins>~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~,</ins> ~evaluating-async~, or ~evaluated~.
            1. Let _stack_ be a new empty List.
            1. Let _result_ be Completion(InnerModuleLinking(_module_, _stack_, 0)).
            1. If _result_ is an abrupt completion, then
              1. For each Cyclic Module Record _m_ of _stack_, do
                1. Assert: _m_.[[Status]] is ~linking~.
                1. Set _m_.[[Status]] to ~unlinked~.
              1. Assert: _module_.[[Status]] is ~unlinked~.
              1. Return ? _result_.
            1. Assert: _module_.[[Status]] is one of ~linked~, ~evaluating-async~, or ~evaluated~.
            1. Assert: _stack_ is empty.
            1. Return ~unused~.
          </emu-alg>

          <emu-clause id="sec-InnerModuleLinking" type="abstract operation" oldids="sec-innermoduleinstantiation">
            <h1>
              InnerModuleLinking (
                _module_: a Module Record,
                _stack_: a List of Cyclic Module Records,
                _index_: a non-negative integer,
              ): either a normal completion containing a non-negative integer or a throw completion
            </h1>
            <dl class="header">
              <dt>description</dt>
              <dd>It is used by Link to perform the actual linking process for _module_, as well as recursively on all other modules in the dependency graph. The _stack_ and _index_ parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to ~linked~ together.</dd>
            </dl>

            <emu-alg>
              1. If _module_ is not a Cyclic Module Record, then
                1. Perform ? _module_.Link().
                1. Return _index_.
              1. If _module_.[[Status]] is one of ~linking~, ~linked~, <ins>~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~,</ins> ~evaluating-async~, or ~evaluated~, then
                1. Return _index_.
              1. Assert: _module_.[[Status]] is ~unlinked~.
              1. Set _module_.[[Status]] to ~linking~.
              1. Set _module_.[[DFSIndex]] to _index_.
              1. Set _module_.[[DFSAncestorIndex]] to _index_.
              1. Set _index_ to _index_ + 1.
              1. Append _module_ to _stack_.
              1. <del>For each String _required_ of _module_.[[RequestedModules]], do</del>
              1. <ins>For each ModuleRequest Record _required_ of _module_.[[RequestedModules]], do</ins>
                1. Let _requiredModule_ be GetImportedModule(_module_, _required_<ins>.[[Specifier]]</ins>).
                1. Set _index_ to ? InnerModuleLinking(_requiredModule_, _stack_, _index_).
                1. If _requiredModule_ is a Cyclic Module Record, then
                  1. Assert: _requiredModule_.[[Status]] is one of ~linking~, ~linked~, <ins>~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~,</ins> ~evaluating-async~, or ~evaluated~.
                  1. Assert: _requiredModule_.[[Status]] is ~linking~ if and only if _stack_ contains _requiredModule_.
                  1. If _requiredModule_.[[Status]] is ~linking~, then
                    1. Set _module_.[[DFSAncestorIndex]] to min(_module_.[[DFSAncestorIndex]], _requiredModule_.[[DFSAncestorIndex]]).
              1. Perform ? _module_.InitializeEnvironment().
              1. Assert: _module_ occurs exactly once in _stack_.
              1. Assert: _module_.[[DFSAncestorIndex]] ‚â§ _module_.[[DFSIndex]].
              1. If _module_.[[DFSAncestorIndex]] = _module_.[[DFSIndex]], then
                1. Let _done_ be *false*.
                1. Repeat, while _done_ is *false*,
                  1. Let _requiredModule_ be the last element of _stack_.
                  1. Remove the last element of _stack_.
                  1. Assert: _requiredModule_ is a Cyclic Module Record.
                  1. Set _requiredModule_.[[Status]] to ~linked~.
                  1. If _requiredModule_ and _module_ are the same Module Record, set _done_ to *true*.
              1. Return _index_.
            </emu-alg>
          </emu-clause>
        </emu-clause>

        <emu-clause id="sec-moduleevaluation" type="concrete method">
          <h1>Evaluate ( ): a Promise</h1>
          <dl class="header">
            <dt>for</dt>
            <dd>a Cyclic Module Record _module_</dd>

            <dt>description</dt>
            <dd>Evaluate transitions this module's [[Status]] from ~linked~ to either ~evaluating-async~ or ~evaluated~. The first time it is called on a module in a given strongly connected component, Evaluate creates and returns a Promise which resolves when the module has finished evaluating. This Promise is stored in the [[TopLevelCapability]] field of the [[CycleRoot]] for the component. Future invocations of Evaluate on any module in the component return the same Promise. (Most of the work is done by the auxiliary function InnerModuleEvaluation.)</dd>
          </dl>

          <emu-alg>
            1. Assert: This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent.
            1. Assert: _module_.[[Status]] is one of ~linked~, <ins>~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~,</ins> ~evaluating-async~, or ~evaluated~.
            1. If _module_.[[Status]] is either ~evaluating-async~ or ~evaluated~, set _module_ to _module_.[[CycleRoot]].
            1. If _module_.[[TopLevelCapability]] is not ~empty~, then
              1. Return _module_.[[TopLevelCapability]].[[Promise]].
            1. Let _stack_ be a new empty List.
            1. Let _capability_ be ! NewPromiseCapability(%Promise%).
            1. Set _module_.[[TopLevelCapability]] to _capability_.
            1. Let _result_ be Completion(InnerModuleEvaluation(_module_, _stack_, 0)).
            1. If _result_ is an abrupt completion, then
              1. For each Cyclic Module Record _m_ of _stack_, do
                1. Assert: _m_.[[Status]] is <ins>either ~async-subgraphs-searching~ or</ins> ~evaluating~.
                1. Set _m_.[[Status]] to ~evaluated~.
                1. Set _m_.[[EvaluationError]] to _result_.
              1. Assert: _module_.[[Status]] is ~evaluated~.
              1. Assert: _module_.[[EvaluationError]] is _result_.
              1. Perform ! Call(_capability_.[[Reject]], *undefined*, ¬´ _result_.[[Value]] ¬ª).
            1. Else,
              1. Assert: _module_.[[Status]] is either ~evaluating-async~ or ~evaluated~.
              1. Assert: _module_.[[EvaluationError]] is ~empty~.
              1. If _module_.[[AsyncEvaluation]] is *false*, then
                1. Assert: _module_.[[Status]] is ~evaluated~.
                1. Perform ! Call(_capability_.[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).
              1. Assert: _stack_ is empty.
            1. Return _capability_.[[Promise]].
          </emu-alg>

          <emu-clause id="sec-innermoduleevaluation" type="abstract operation">
            <h1>
              InnerModuleEvaluation (
                _module_: a Module Record,
                _stack_: a List of Cyclic Module Records,
                _index_: a non-negative integer,
              ): either a normal completion containing a non-negative integer or a throw completion
            </h1>
            <dl class="header">
              <dt>description</dt>
              <dd>It is used by Evaluate to perform the actual evaluation process for _module_, as well as recursively on all other modules in the dependency graph. The _stack_ and _index_ parameters, as well as _module_'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in InnerModuleLinking.</dd>
            </dl>

            <emu-alg>
              1. If _module_ is not a Cyclic Module Record, then
                1. Let _promise_ be ! _module_.Evaluate().
                1. Assert: _promise_.[[PromiseState]] is not ~pending~.
                1. If _promise_.[[PromiseState]] is ~rejected~, then
                  1. Return ThrowCompletion(_promise_.[[PromiseResult]]).
                1. Return _index_.
              1. If _module_.[[Status]] is either ~evaluating-async~ or ~evaluated~, then
                1. [id="step-innermoduleevaluation-reset-cycleroot"] <ins>If _module_.[[Status]] is ~evaluated~, set _module_.[[CycleRoot]] to _module_.</ins>
                1. If _module_.[[EvaluationError]] is ~empty~, return _index_.
                1. Otherwise, return ? _module_.[[EvaluationError]].
              1. If _module_.[[Status]] is ~evaluating~, return _index_.
              1. Assert: _module_.[[Status]] is <ins>one of</ins> ~linked~, <ins>~async-subgraphs-searching~, ~async-subgraphs-evaluating-async~, or ~async-subgraphs-evaluated~</ins>.
              1. Set _module_.[[Status]] to ~evaluating~.
              1. Set _module_.[[DFSIndex]] to _index_.
              1. Set _module_.[[DFSAncestorIndex]] to _index_.
              1. Set _module_.[[PendingAsyncDependencies]] to 0.
              1. [id="step-innermoduleevaluation-reset-asyncevaluation"] <ins>Set _module_.[[AsyncEvaluation]] to *false*.</ins>
              1. Set _index_ to _index_ + 1.
              1. Append _module_ to _stack_.
              1. <del>For each String _required_ of _module_.[[RequestedModules]], do</del>
              1. <ins>For each ModuleRequest Record _required_ of _module_.[[RequestedModules]], do</ins>
                1. Let _requiredModule_ be GetImportedModule(_module_, _required_<ins>.[[Specifier]]</ins>).
                1. <ins>If _required_.[[Phase]] is ~defer~, then</ins>
                  1. <ins>Set _index_ to ? InnerAsyncSubgraphsEvaluation(_requiredModule_, _stack_, _index_).</ins>
                1. <ins>Else,</ins>
                  1. Set _index_ to ? InnerModuleEvaluation(_requiredModule_, _stack_, _index_).
                1. If _requiredModule_ is a Cyclic Module Record, then
                  1. <ins>Perform ? AfterCyclicModuleRecordEvaluation(_module_, _requiredModule_, _stack_).</ins>
                  1. <del>Assert: _requiredModule_.[[Status]] is one of ~evaluating~, ~evaluating-async~, or ~evaluated~.</del>
                  1. <del>Assert: _requiredModule_.[[Status]] is ~evaluating~ if and only if _stack_ contains _requiredModule_.</del>
                  1. <del>If _requiredModule_.[[Status]] is ~evaluating~, then</del>
                    1. <del>Set _module_.[[DFSAncestorIndex]] to min(_module_.[[DFSAncestorIndex]], _requiredModule_.[[DFSAncestorIndex]]).</del>
                  1. <del>Else,</del>
                    1. <del>Set _requiredModule_ to _requiredModule_.[[CycleRoot]].</del>
                    1. <del>Assert: _requiredModule_.[[Status]] is either ~evaluating-async~ or ~evaluated~.</del>
                    1. <del>If _requiredModule_.[[EvaluationError]] is not ~empty~, return ? _requiredModule_.[[EvaluationError]].</del>
                  1. <del>If _requiredModule_.[[AsyncEvaluation]] is *true*, then</del>
                    1. <del>Set _module_.[[PendingAsyncDependencies]] to _module_.[[PendingAsyncDependencies]] + 1.</del>
                    1. <del>Append _module_ to _requiredModule_.[[AsyncParentModules]].</del>
              1. If _module_.[[PendingAsyncDependencies]] > 0 or _module_.[[HasTLA]] is *true*, then
                1. Assert: _module_.[[AsyncEvaluation]] is *false* <del>and was never previously set to *true*</del>.
                1. Set _module_.[[AsyncEvaluation]] to *true*.
                1. NOTE: The order in which module records have their [[AsyncEvaluation]] fields transition to *true* is significant. (See <emu-xref href="#sec-async-module-execution-fulfilled"></emu-xref>.)
                1. If _module_.[[PendingAsyncDependencies]] = 0, perform ExecuteAsyncModule(_module_).
              1. Otherwise, perform ? <emu-meta effects="user-code">_module_.ExecuteModule()</emu-meta>.
              1. Assert: _module_ occurs <del>exactly once</del> in _stack_.
              1. Assert: _module_.[[DFSAncestorIndex]] ‚â§ _module_.[[DFSIndex]].
              1. If _module_.[[DFSAncestorIndex]] = _module_.[[DFSIndex]], then
                1. Let _done_ be *false*.
                1. Repeat, while _done_ is *false*,
                  1. Let _requiredModule_ be the last element of _stack_.
                  1. Remove the last element of _stack_.
                  1. Assert: _requiredModule_ is a Cyclic Module Record.
                  1. If _requiredModule_.[[AsyncEvaluation]] is *false*, then
                    1. <ins>Assert: _requiredModule_.[[Status]] is ~evaluating~.</ins>
                    1. Set _requiredModule_.[[Status]] to ~evaluated~.
                  1. <ins>Else if _requiredModule_.[[Status]] is ~async-subgraphs-searching~, then</ins>
                    1. <ins>Set _requiredModule_.[[Status]] to ~async-subgraphs-evaluating-async~.</ins>
                  1. Else,
                    1. <ins>Assert: _requiredModule_.[[Status]] is ~evaluating~.</ins>
                    1. Set _requiredModule_.[[Status]] to ~evaluating-async~.
                  1. If _requiredModule_ and _module_ are the same Module Record <ins>and _stack_ does not contain _module_</ins>, set _done_ to *true*.
                  1. Set _requiredModule_.[[CycleRoot]] to _module_.
                1. <ins>Set _done_ to *false*.</ins>
                1. [id="step-innermoduleevaluation-stack-cleanup"] <ins>Repeat, while _done_ is *false* and _stack_ is not empty,</ins>
                  1. <ins>Let _requiredModule_ be the last element of _stack_.</ins>
                  1. <ins>If _requiredModule_.[[Status]] is ~evaluated~ or ~evaluating-async~, then</ins>
                    1. <ins>NOTE: _requiredModule_ has transitioned to ~evaluated~ or ~evaluating-async~ in the above loop. It was inserted twice in _stack_, first by InnerAsyncSubgraphsEvaluation and then by InnerModuleEvaluation.</ins>
                    1. <ins>Remove the last element of _stack_.</ins>
                  1. <ins>Else,</ins>
                    1. <ins>Set _done_ to *true*.</ins>
              1. Return _index_.
            </emu-alg>
            <emu-note>
              <p>A module is ~evaluating~ while it is being traversed by InnerModuleEvaluation. A module is ~evaluated~ on execution completion or ~evaluating-async~ during execution if its [[HasTLA]] field is *true* or if it has asynchronous dependencies.</p>
            </emu-note>
            <emu-note>
              <p>Any modules depending on a module of an asynchronous cycle when that cycle is not ~evaluating~ will instead depend on the execution of the root of the cycle via [[CycleRoot]]. This ensures that the cycle state can be treated as a single strongly connected component through its root module state.</p>
            </emu-note>
            <emu-note>
              <p><ins>Step <emu-xref href="#step-innermoduleevaluation-reset-cycleroot"></emu-xref> is necessary when re-traversing cycles that have been already partially evaluated due to async modules in deferred subgraphs.</ins></p>
              <p><ins>See the example described at <emu-xref href="#figure-module-graph-deferred-async-cycle-root"></emu-xref>.</ins></p>
            </emu-note>
            <emu-note>
              <p><ins>Step <emu-xref href="#step-innermoduleevaluation-reset-asyncevaluation"></emu-xref> is necessary when evaluating deferred modules that have asynchronous dependencies. [[AsyncEvaluation]] will be *true* while eagerly evaluating their dependencies, and *false* when later evaluating the module itself.</ins></p>
              <p><ins>See the example described at <emu-xref href="#figure-module-graph-deferred-async"></emu-xref>.</ins></p>
            </emu-note>
            <emu-note>
              <p><ins>Step <emu-xref href="#step-innermoduleevaluation-stack-cleanup"></emu-xref> is necessary when a module in a cycle is first imported lazily, and then eagerly by one of its asynchronous dependencies.</ins></p>
              <p><ins>See the example described at <emu-xref href="#figure-module-graph-deferred-async-cycle-deferred"></emu-xref>.</ins></p>
            </emu-note>
          </emu-clause>

          <emu-clause id="sec-InnerAsyncSubgraphsEvaluation" type="abstract operation">
            <h1>
              <ins>
                InnerAsyncSubgraphsEvaluation (
                  _module_: a Module Record,
                  _stack_: a List of Cyclic Module Records,
                  _index_: a non-negative integer,
                ): either a normal completion containing a non-negative integer or a throw completion
              </ins>
            </h1>
            <dl class="header">
              <dt>description</dt>
              <dd></dd>
            </dl>

            <emu-note type="editor">
              The diff highlighted in this abstract operation method is relative to the original <a href="https://tc39.es/ecma262/#sec-innermoduleevaluation">InnerModuleEvaluation</a> abstract operation.
            </emu-note>

            <emu-alg>
              1. <ins>If _module_ is not a Cyclic Module Record or _module_.[[HasTLA]] is *true*, then</ins>
                1. <ins>Return ? InnerModuleEvaluation(_module_, _stack_, _index_).</ins>
              1. <del>If _module_ is not a Cyclic Module Record, then</del>
                1. <del>Let _promise_ be ! _module_.Evaluate().</del>
                1. <del>Assert: _promise_.[[PromiseState]] is not ~pending~.</del>
                1. <del>If _promise_.[[PromiseState]] is ~rejected~, then</del>
                  1. <del>Return ThrowCompletion(_promise_.[[PromiseResult]]).</del>
                1. <del>Return _index_.</del>
              1. If _module_.[[Status]] is <del>either</del><ins>one of ~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~,</ins> ~evaluating-async~ or ~evaluated~, then
                1. If _module_.[[EvaluationError]] is ~empty~, return _index_.
                1. Otherwise, return ? _module_.[[EvaluationError]].
              1. If _module_.[[Status]] is <ins>~async-subgraphs-searching~ or</ins> ~evaluating~, return _index_.
              1. Assert: _module_.[[Status]] is ~linked~.
              1. Set _module_.[[Status]] to <del>~evaluating~</del><ins>~async-subgraphs-searching~</ins>.
              1. Set _module_.[[DFSIndex]] to _index_.
              1. Set _module_.[[DFSAncestorIndex]] to _index_.
              1. Set _module_.[[PendingAsyncDependencies]] to 0.
              1. Set _index_ to _index_ + 1.
              1. Append _module_ to _stack_.
              1. <del>For each String _required_ of _module_.[[RequestedModules]], do</del>
              1. <ins>For each ModuleRequest Record _required_ of _module_.[[RequestedModules]], do</ins>
                1. Let _requiredModule_ be GetImportedModule(_module_, _required_<ins>.[[Specifier]]</ins>).
                1. Set _index_ to ? <del>InnerModuleEvaluation</del><ins>InnerAsyncSubgraphsEvaluation</ins>(_requiredModule_, _stack_, _index_).
                1. If _requiredModule_ is a Cyclic Module Record, then
                  1. <ins>Perform ? AfterCyclicModuleRecordEvaluation(_requiredModule_, _stack_, _index_).</ins>
                  1. <del>Assert: _requiredModule_.[[Status]] is one of ~evaluating~, ~evaluating-async~, or ~evaluated~.</del>
                  1. <del>Assert: _requiredModule_.[[Status]] is ~evaluating~ if and only if _stack_ contains _requiredModule_.</del>
                  1. <del>If _requiredModule_.[[Status]] is ~evaluating~, then</del>
                    1. <del>Set _module_.[[DFSAncestorIndex]] to min(_module_.[[DFSAncestorIndex]], _requiredModule_.[[DFSAncestorIndex]]).</del>
                  1. <del>Else,</del>
                    1. <del>Set _requiredModule_ to _requiredModule_.[[CycleRoot]].</del>
                    1. <del>Assert: _requiredModule_.[[Status]] is either ~evaluating-async~ or ~evaluated~.</del>
                    1. <del>If _requiredModule_.[[EvaluationError]] is not ~empty~, return ? _requiredModule_.[[EvaluationError]].</del>
                  1. <del>If _requiredModule_.[[AsyncEvaluation]] is *true*, then</del>
                    1. <del>Set _module_.[[PendingAsyncDependencies]] to _module_.[[PendingAsyncDependencies]] + 1.</del>
                    1. <del>Append _module_ to _requiredModule_.[[AsyncParentModules]].</del>
              1. If _module_.[[PendingAsyncDependencies]] > 0 <del>or _module_.[[HasTLA]] is *true*</del>, then
                1. Assert: _module_.[[AsyncEvaluation]] is *false* <del>and was never previously set to *true*</del>.
                1. Set _module_.[[AsyncEvaluation]] to *true*.
                1. NOTE: The order in which module records have their [[AsyncEvaluation]] fields transition to *true* is significant. (See <emu-xref href="#sec-async-module-execution-fulfilled"></emu-xref>.)
                1. <del>If _module_.[[PendingAsyncDependencies]] = 0, perform ExecuteAsyncModule(_module_).</del>
              1. <del>Otherwise, perform ? _module_.ExecuteModule().</del>
              1. Assert: _module_ occurs <del>exactly once</del> in _stack_.
              1. Assert: _module_.[[DFSAncestorIndex]] ‚â§ _module_.[[DFSIndex]].
              1. If _module_.[[DFSAncestorIndex]] = _module_.[[DFSIndex]], then
                1. Let _done_ be *false*.
                1. Repeat, while _done_ is *false*,
                  1. Let _requiredModule_ be the last element of _stack_.
                  1. Remove the last element of _stack_.
                  1. Assert: _requiredModule_ is a Cyclic Module Record.
                  1. If _requiredModule_.[[AsyncEvaluation]] is *false*, then
                    1. <ins>If _requiredModule_.[[Status]] is ~async-subgraphs-searching~, set _requiredModule_.[[Status]] to ~async-subgraphs-evaluated~.</ins>
                    1. <ins>Else,</ins>
                      1. <ins>Assert: _requiredModule_.[[Status]] is ~evaluating~.</ins>
                      1. Set _requiredModule_.[[Status]] to ~evaluated~.
                  1. Else,
                    1. <ins>If _requiredModule_.[[Status]] is ~async-subgraphs-searching~, set _requiredModule_.[[Status]] to ~async-subgraphs-evaluating-async~.</ins>
                    1. <ins>Else,</ins>
                      1. <ins>Assert: _requiredModule_.[[Status]] is ~evaluating~.</ins>
                      1. Set _requiredModule_.[[Status]] to ~evaluating-async~.
                  1. If _requiredModule_ and _module_ are the same Module Record, set _done_ to *true*.
                  1. Set _requiredModule_.[[CycleRoot]] to _module_.
              1. Return _index_.
            </emu-alg>
          </emu-clause>

          <emu-clause id="sec-AfterCyclicModuleRecordEvaluation" type="abstract operation">
            <h1>
              <ins>
                AfterCyclicModuleRecordEvaluation (
                  _module_: a Cyclic Module Record,
                  _requiredModule_: a Cyclic Module Record,
                  _stack_: a List of Cyclic Module Records,
                ): either a normal completion containing ~unused~ or a throw completion
              </ins>
            </h1>
            <dl class="header">
              <dt>description</dt>
              <dd></dd>
            </dl>

            <emu-note type="editor">
              The diff highlighted in this abstract operation method is relative to steps <span>11</span>.c.i-11.c.v of the original <a href="https://tc39.es/ecma262/#sec-innermoduleevaluation">InnerModuleEvaluation</a> abstract operation.
            </emu-note>

            <emu-alg>
              1. Assert: _requiredModule_.[[Status]] is one of <ins>~async-subgraphs-searching~, ~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~,</ins> ~evaluating~, ~evaluating-async~, or ~evaluated~.
              1. Assert: _requiredModule_.[[Status]] is <ins>~async-subgraphs-searching~ or</ins> ~evaluating~ if and only if _stack_ contains _requiredModule_.
              1. If _requiredModule_.[[Status]] is ~evaluating~, <ins>or both _requiredModule_.[[Status]] and _module_.[[Status]] are ~async-subgraphs-searching~</ins>, then
                1. Set _module_.[[DFSAncestorIndex]] to min(_module_.[[DFSAncestorIndex]], _requiredModule_.[[DFSAncestorIndex]]).
              1. Else <ins>if _requiredModule_.[[Status]] is not ~async-subgraphs-searching~</ins>,
                1. Set _requiredModule_ to _requiredModule_.[[CycleRoot]].
                1. Assert: _requiredModule_.[[Status]] is <del>either</del><ins>one of ~async-subgraphs-evaluating-async~, ~async-subgraphs-evaluated~,</ins> ~evaluating-async~ or ~evaluated~.
                1. If _requiredModule_.[[EvaluationError]] is not ~empty~, return ? _requiredModule_.[[EvaluationError]].
              1. If _requiredModule_.[[AsyncEvaluation]] is *true*, then
                1. Set _module_.[[PendingAsyncDependencies]] to _module_.[[PendingAsyncDependencies]] + 1.
                1. Append _module_ to _requiredModule_.[[AsyncParentModules]].
              1. <ins>Return ~unused~.</ins>
            </emu-alg>
          </emu-clause>

          <emu-clause id="sec-execute-async-module" type="abstract operation">
            <h1>
              ExecuteAsyncModule (
                _module_: a Cyclic Module Record,
              ): ~unused~
            </h1>
            <dl class="header">
            </dl>

            <emu-alg>
              1. Assert: _module_.[[Status]] is either ~evaluating~ or ~evaluating-async~.
              1. Assert: _module_.[[HasTLA]] is *true*.
              1. Let _capability_ be ! NewPromiseCapability(%Promise%).
              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and performs the following steps when called:
                1. Perform AsyncModuleExecutionFulfilled(_module_).
                1. Return *undefined*.
              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *""*, ¬´ ¬ª).
              1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_error_) that captures _module_ and performs the following steps when called:
                1. Perform AsyncModuleExecutionRejected(_module_, _error_).
                1. Return *undefined*.
              1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 0, *""*, ¬´ ¬ª).
              1. Perform PerformPromiseThen(_capability_.[[Promise]], _onFulfilled_, _onRejected_).
              1. Perform ! <emu-meta effects="user-code">_module_.ExecuteModule</emu-meta>(_capability_).
              1. Return ~unused~.
            </emu-alg>
          </emu-clause>

          <emu-clause id="sec-gather-available-ancestors" type="abstract operation">
            <h1>
              GatherAvailableAncestors (
                _module_: a Cyclic Module Record,
                _execList_: a List of Cyclic Module Records,
              ): ~unused~
            </h1>
            <dl class="header">
            </dl>
            <emu-alg>
              1. For each Cyclic Module Record _m_ of _module_.[[AsyncParentModules]], do
                1. <ins>TODO: Check if this change can be reverded.</ins>
                1. If _execList_ does not contain _m_ and _m_.[[CycleRoot]].[[EvaluationError]] is ~empty~ <ins>and _m_.[[Status]] is not ~evaluated~</ins>, then
                  1. Assert: _m_.[[Status]] is <ins>either ~async-subgraphs-evaluating-async~ or</ins> ~evaluating-async~.
                  1. Assert: _m_.[[EvaluationError]] is ~empty~.
                  1. Assert: _m_.[[AsyncEvaluation]] is *true*.
                  1. Assert: _m_.[[PendingAsyncDependencies]] > 0.
                  1. Set _m_.[[PendingAsyncDependencies]] to _m_.[[PendingAsyncDependencies]] - 1.
                  1. If _m_.[[PendingAsyncDependencies]] = 0, then
                    1. Append _m_ to _execList_.
                    1. If _m_.[[HasTLA]] is *false*, perform GatherAvailableAncestors(_m_, _execList_).
              1. Return ~unused~.
            </emu-alg>
            <emu-note>
              <p>When an asynchronous execution for a root _module_ is fulfilled, this function determines the list of modules which are able to synchronously execute together on this completion, populating them in _execList_.</p>
            </emu-note>
          </emu-clause>

          <emu-clause id="sec-async-module-execution-fulfilled" type="abstract operation">
            <h1>
              AsyncModuleExecutionFulfilled (
                _module_: a Cyclic Module Record,
              ): ~unused~
            </h1>
            <dl class="header">
            </dl>
            <emu-alg>
              1. If _module_.[[Status]] is ~evaluated~, then
                1. Assert: _module_.[[EvaluationError]] is not ~empty~.
                1. Return ~unused~.
              1. Assert: _module_.[[Status]] is ~evaluating-async~.
              1. Assert: _module_.[[AsyncEvaluation]] is *true*.
              1. Assert: _module_.[[EvaluationError]] is ~empty~.
              1. Set _module_.[[AsyncEvaluation]] to *false*.
              1. Set _module_.[[Status]] to ~evaluated~.
              1. If _module_.[[TopLevelCapability]] is not ~empty~, then
                1. Assert: _module_.[[CycleRoot]] is _module_.
                1. Perform ! Call(_module_.[[TopLevelCapability]].[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).
              1. Let _execList_ be a new empty List.
              1. Perform GatherAvailableAncestors(_module_, _execList_).
              1. Let _sortedExecList_ be a List whose elements are the elements of _execList_, in the order in which they had their [[AsyncEvaluation]] fields <ins>last</ins> set to *true* in InnerModuleEvaluation <ins>or InnerAsyncSubgraphsEvaluation</ins>.
              1. Assert: All elements of _sortedExecList_ have their [[AsyncEvaluation]] field set to *true*, [[PendingAsyncDependencies]] field set to 0, and [[EvaluationError]] field set to ~empty~.
              1. For each Cyclic Module Record _m_ of _sortedExecList_, do
                1. If _m_.[[Status]] is ~evaluated~, then
                  1. Assert: _m_.[[EvaluationError]] is not ~empty~.
                1. Else if _m_.[[HasTLA]] is *true*, then
                  1. Perform ExecuteAsyncModule(_m_).
                1. <ins>Else,</ins>
                  1. <ins>Let _success_ be *false*.</ins>
                  1. <ins>If _m_.[[Status]] is ~async-subgraphs-evaluating-async~, then</ins>
                    1. <ins>Set _m_.[[Status]] to ~async-subgraphs-evaluated~.</ins>
                    1. <ins>Set _success_ to *true*.</ins>
                  1. <ins>Else,</ins>
                    1. Let _result_ be <emu-meta effects="user-code">_m_.ExecuteModule()</emu-meta>.
                    1. If _result_ is an abrupt completion, then
                      1. Perform AsyncModuleExecutionRejected(_m_, _result_.[[Value]]).
                    1. Else,
                      1. Set _m_.[[Status]] to ~evaluated~.
                      1. <ins>Set _success_ to *true*.</ins>
                      1. <del>If _m_.[[TopLevelCapability]] is not ~empty~, then</del>
                        1. <del>Assert: _m_.[[CycleRoot]] is _m_.</del>
                        1. <del>Perform ! Call(_m_.[[TopLevelCapability]].[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).</del>
                  1. <ins>If _success_ is *true*, then</ins>
                    1. <ins>If _m_.[[TopLevelCapability]] is not ~empty~, then</ins>
                      1. <ins>Assert: _m_.[[CycleRoot]] is _m_.</ins>
                      1. <ins>Perform ! Call(_m_.[[TopLevelCapability]].[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).</ins>
              1. Return ~unused~.
            </emu-alg>
          </emu-clause>

          <emu-clause id="sec-async-module-execution-rejected" type="abstract operation">
            <h1>
              AsyncModuleExecutionRejected (
                _module_: a Cyclic Module Record,
                _error_: an ECMAScript language value,
              ): ~unused~
            </h1>
            <dl class="header">
            </dl>
            <emu-alg>
              1. If _module_.[[Status]] is ~evaluated~, then
                1. Assert: _module_.[[EvaluationError]] is not ~empty~.
                1. Return ~unused~.
              1. Assert: _module_.[[Status]] is ~evaluating-async~.
              1. Assert: _module_.[[AsyncEvaluation]] is *true*.
              1. Assert: _module_.[[EvaluationError]] is ~empty~.
              1. Set _module_.[[EvaluationError]] to ThrowCompletion(_error_).
              1. Set _module_.[[Status]] to ~evaluated~.
              1. For each Cyclic Module Record _m_ of _module_.[[AsyncParentModules]], do
                1. Perform AsyncModuleExecutionRejected(_m_, _error_).
              1. If _module_.[[TopLevelCapability]] is not ~empty~, then
                1. Assert: _module_.[[CycleRoot]] is _module_.
                1. Perform ! Call(_module_.[[TopLevelCapability]].[[Reject]], *undefined*, ¬´ _error_ ¬ª).
              1. Return ~unused~.
            </emu-alg>
          </emu-clause>
        </emu-clause>

        <emu-clause id="sec-example-cyclic-module-record-graphs">
          <h1>Example Cyclic Module Record Graphs</h1>

          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>

          <p>First consider the following simple module graph:</p>

          <emu-figure id="figure-module-graph-simple" caption="A simple module graph">
            <img alt="A module graph in which module A depends on module B, and module B depends on module C" width="121" height="211" src="img/module-graph-simple.svg">
          </emu-figure>

          <p>Let's first assume that there are no error conditions. When a host first calls _A_.LoadRequestedModules(), this will complete successfully by assumption, and recursively load the dependencies of _B_ and _C_ as well (respectively, _C_ and none), and then set _A_.[[Status]] = _B_.[[Status]] = _C_.[[Status]] = ~unlinked~. Then, when the host calls _A_.Link(), it will complete successfully (again by assumption) such that _A_.[[Status]] = _B_.[[Status]] = _C_.[[Status]] = linked. These preparatory steps can be performed at any time. Later, when the host is ready to incur any possible side effects of the modules, it can call _A_.Evaluate(), which will complete successfully, returning a Promise resolving to *undefined* (again by assumption), recursively having evaluated first _C_ and then _B_. Each module's [[Status]] at this point will be ~evaluated~.</p>

          <p>Consider then cases involving linking errors, after a successful call to _A_.LoadRequestedModules(). If InnerModuleLinking of _C_ succeeds but, thereafter, fails for _B_, for example because it imports something that _C_ does not provide, then the original _A_.Link() will fail, and both _A_ and _B_'s [[Status]] remain ~unlinked~. _C_'s [[Status]] has become ~linked~, though.</p>

          <p>Finally, consider a case involving evaluation errors after a successful call to Link(). If InnerModuleEvaluation of _C_ succeeds but, thereafter, fails for _B_, for example because _B_ contains code that throws an exception, then the original _A_.Evaluate() will fail, returning a rejected Promise. The resulting exception will be recorded in both _A_ and _B_'s [[EvaluationError]] fields, and their [[Status]] will become ~evaluated~. _C_ will also become ~evaluated~ but, in contrast to _A_ and _B_, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a host tries to reuse _A_ or _B_ by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>

          <p>Now consider a different type of error condition:</p>

          <emu-figure id="figure-module-graph-missing" caption="A module graph with an unresolvable module">
            <img alt="A module graph in which module A depends on a missing (unresolvable) module, represented by ???" width="121" height="121" src="img/module-graph-missing.svg">
          </emu-figure>

          <p>In this scenario, module _A_ declares a dependency on some other module, but no Module Record exists for that module, i.e. HostLoadImportedModule calls FinishLoadingImportedModule with an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but ParseModule returning some errors when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the completion they pass to FinishLoadingImportedModule. In any case, this exception causes a loading failure, which results in _A_'s [[Status]] remaining ~new~.</p>

          <p>The difference here between loading, linking and evaluation errors is due to the following characteristic:</p>
          <ul>
            <li>Evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.)</li>
            <li>Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</li>
            <li>Loading closely interacts with the host, and it may be desiderable for some of them to allow users to retry failed loads (for example, if the failure is caused by temporarily bad network conditions).</li>
          </ul>

          <p>Now, consider a module graph with a cycle:</p>

          <emu-figure id="figure-module-graph-cycle" caption="A cyclic module graph">
            <img alt="A module graph in which module A depends on module B and C, but module B also depends on module A" width="181" height="121" src="img/module-graph-cycle.svg">
          </emu-figure>

          <p>Here we assume that the entry point is module _A_, so that the host proceeds by calling _A_.LoadRequestedModules(), which performs InnerModuleLoading on _A_. This in turn calls InnerModuleLoading on _B_ and _C_. Because of the cycle, this again triggers InnerModuleLoading on _A_, but at this point it is a no-op since _A_'s dependencies loading has already been triggered during this LoadRequestedModules process. When all the modules in the graph have been successfully loaded, their [[Status]] transitions from ~new~ to ~unlinked~ at the same time.</p>

          <p>Then the host proceeds by calling _A_.Link(), which performs InnerModuleLinking on _A_. This in turn calls InnerModuleLinking on _B_. Because of the cycle, this again triggers InnerModuleLinking on _A_, but at this point it is a no-op since _A_.[[Status]] is already ~linking~. _B_.[[Status]] itself remains ~linking~ when control gets back to _A_ and InnerModuleLinking is triggered on _C_. After this returns with _C_.[[Status]] being ~linked~, both _A_ and _B_ transition from ~linking~ to ~linked~ together; this is by design, since they form a strongly connected component. It's possible to transition the status of modules in the same SCC at the same time because during this phase the module graph is traversed with a depth-first search.</p>

          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>

          <p>Now consider a case where _A_ has a linking error; for example, it tries to import a binding from _C_ that does not exist. In that case, the above steps still occur, including the early return from the second call to InnerModuleLinking on _A_. However, once we unwind back to the original InnerModuleLinking on _A_, it fails during InitializeEnvironment, namely right after _C_.ResolveExport(). The thrown *SyntaxError* exception propagates up to _A_.Link, which resets all modules that are currently on its _stack_ (these are always exactly the modules that are still ~linking~). Hence both _A_ and _B_ become ~unlinked~. Note that _C_ is left as ~linked~.</p>

          <p>Alternatively, consider a case where _A_ has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to InnerModuleEvaluation on _A_. However, once we unwind back to the original InnerModuleEvaluation on _A_, it fails by assumption. The exception thrown propagates up to _A_.Evaluate(), which records the error in all modules that are currently on its _stack_ (i.e., the modules that are still ~evaluating~) as well as via [[AsyncParentModules]], which form a chain for modules which contain or depend on top-level `await` through the whole dependency graph through the AsyncModuleExecutionRejected algorithm. Hence both _A_ and _B_ become ~evaluated~ and the exception is recorded in both _A_ and _B_'s [[EvaluationError]] fields, while _C_ is left as ~evaluated~ with no [[EvaluationError]].</p>

          <p>Lastly, consider a module graph with a cycle, where all modules complete asynchronously:</p>
          <emu-figure id="figure-module-graph-cycle-async" caption="An asynchronous cyclic module graph">
            <img alt="A module graph in which module A depends on module B and C, module B depends on module D, module C depends on module D and E, and module D depends on module A" width="241" height="211" src="img/module-graph-cycle-async.svg">
          </emu-figure>
          <p>Loading and linking happen as before, and all modules end up with [[Status]] set to ~linked~.</p>

          <p>Calling _A_.Evaluate() calls InnerModuleEvaluation on _A_, _B_, and _D_, which all transition to ~evaluating~. Then InnerModuleEvaluation is called on _A_ again, which is a no-op because it is already ~evaluating~. At this point, _D_.[[PendingAsyncDependencies]] is 0, so ExecuteAsyncModule(_D_) is called and we call _D_.ExecuteModule with a new PromiseCapability tracking the asynchronous execution of _D_. We unwind back to the InnerModuleEvaluation on _B_, setting _B_.[[PendingAsyncDependencies]] to 1 and _B_.[[AsyncEvaluation]] to *true*. We unwind back to the original InnerModuleEvaluation on _A_, setting _A_.[[PendingAsyncDependencies]] to 1. In the next iteration of the loop over _A_'s dependencies, we call InnerModuleEvaluation on _C_ and thus on _D_ (again a no-op) and _E_. As _E_ has no dependencies and is not part of a cycle, we call ExecuteAsyncModule(_E_) in the same manner as _D_ and _E_ is immediately removed from the stack. We unwind once more to the original InnerModuleEvaluation on _A_, setting _C_.[[AsyncEvaluation]] to *true*. Now we finish the loop over _A_'s dependencies, set _A_.[[AsyncEvaluation]] to *true*, and remove the entire strongly connected component from the stack, transitioning all of the modules to ~evaluating-async~ at once. At this point, the fields of the modules are as given in <emu-xref href="#table-module-graph-cycle-async-fields-1"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-1" class="module-overflow" caption="Module fields after the initial Evaluate() call">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                </tr>
              </thead>
              <tr>
                <th>_A_</th>
                <td>0</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ ¬ª</td>
                <td>2 (_B_ and _C_)</td>
              </tr>
              <tr>
                <th>_B_</th>
                <td>1</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>1 (_D_)</td>
              </tr>
              <tr>
                <th>_C_</th>
                <td>2</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>2 (_D_ and _E_)</td>
              </tr>
              <tr>
                <th>_D_</th>
                <td>3</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ _B_, _C_ ¬ª</td>
                <td>0</td>
              </tr>
              <tr>
                <th>_E_</th>
                <td>4</td>
                <td>4</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ _C_ ¬ª</td>
                <td>0</td>
              </tr>
            </table>
          </emu-table>

          <p>Let us assume that _E_ finishes executing first. When that happens, AsyncModuleExecutionFulfilled is called, _E_.[[Status]] is set to ~evaluated~ and _C_.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href="#table-module-graph-cycle-async-fields-2"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-2" class="module-overflow" caption="Module fields after module _E_ finishes executing">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                </tr>
              </thead>
              <tr>
                <th>_C_</th>
                <td>2</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>1 (_D_)</td>
              </tr>
              <tr>
                <th>_E_</th>
                <td>4</td>
                <td>4</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ _C_ ¬ª</td>
                <td>0</td>
              </tr>
            </table>
          </emu-table>

          <p>_D_ is next to finish (as it was the only module that was still executing). When that happens, AsyncModuleExecutionFulfilled is called again and _D_.[[Status]] is set to ~evaluated~. Then _B_.[[PendingAsyncDependencies]] is decremented to become 0, ExecuteAsyncModule is called on _B_, and it starts executing. _C_.[[PendingAsyncDependencies]] is also decremented to become 0, and _C_ starts executing (potentially in parallel to _B_ if _B_ contains an `await`). The fields of the updated modules are as given in <emu-xref href="#table-module-graph-cycle-async-fields-3"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-3" class="module-overflow" caption="Module fields after module _D_ finishes executing">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                </tr>
              </thead>
              <tr>
                <th>_B_</th>
                <td>1</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>0</td>
              </tr>
              <tr>
                <th>_C_</th>
                <td>2</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>0</td>
              </tr>
              <tr>
                <th>_D_</th>
                <td>3</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ _B_, _C_ ¬ª</td>
                <td>0</td>
              </tr>
            </table>
          </emu-table>

          <p>Let us assume that _C_ finishes executing next. When that happens, AsyncModuleExecutionFulfilled is called again, _C_.[[Status]] is set to ~evaluated~ and _A_.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href="#table-module-graph-cycle-async-fields-4"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-4" class="module-overflow" caption="Module fields after module _C_ finishes executing">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                </tr>
              </thead>
              <tr>
                <th>_A_</th>
                <td>0</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ ¬ª</td>
                <td>1 (_B_)</td>
              </tr>
              <tr>
                <th>_C_</th>
                <td>2</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>0</td>
              </tr>
            </table>
          </emu-table>

          <p>Then, _B_ finishes executing. When that happens, AsyncModuleExecutionFulfilled is called again and _B_.[[Status]] is set to ~evaluated~. _A_.[[PendingAsyncDependencies]] is decremented to become 0, so ExecuteAsyncModule is called and it starts executing. The fields of the updated modules are as given in <emu-xref href="#table-module-graph-cycle-async-fields-5"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-5" class="module-overflow" caption="Module fields after module _B_ finishes executing">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                </tr>
              </thead>
              <tr>
                <th>_A_</th>
                <td>0</td>
                <td>0</td>
                <td>~evaluating-async~</td>
                <td>*true*</td>
                <td>¬´ ¬ª</td>
                <td>0</td>
              </tr>
              <tr>
                <th>_B_</th>
                <td>1</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>0</td>
              </tr>
            </table>
          </emu-table>

          <p>Finally, _A_ finishes executing. When that happens, AsyncModuleExecutionFulfilled is called again and _A_.[[Status]] is set to ~evaluated~. At this point, the Promise in _A_.[[TopLevelCapability]] (which was returned from _A_.Evaluate()) is resolved, and this concludes the handling of this module graph. The fields of the updated module are as given in <emu-xref href="#table-module-graph-cycle-async-fields-6"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-6" class="module-overflow" caption="Module fields after module _A_ finishes executing">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                </tr>
              </thead>
              <tr>
                <th>_A_</th>
                <td>0</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ ¬ª</td>
                <td>0</td>
              </tr>
            </table>
          </emu-table>

          <p>Alternatively, consider a failure case where _C_ fails execution and returns an error before _B_ has finished executing. When that happens, AsyncModuleExecutionRejected is called, which sets _C_.[[Status]] to ~evaluated~ and _C_.[[EvaluationError]] to the error. It then propagates this error to all of the AsyncParentModules by performing AsyncModuleExecutionRejected on each of them. The fields of the updated modules are as given in <emu-xref href="#table-module-graph-cycle-async-fields-7"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-7" class="module-overflow" caption="Module fields after module _C_ finishes with an error">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                  <th>[[EvaluationError]]</th>
                </tr>
              </thead>
              <tr>
                <th>_A_</th>
                <td>0</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ ¬ª</td>
                <td>1 (_B_)</td>
                <td>~empty~</td>
              </tr>
              <tr>
                <th>_C_</th>
                <td>2</td>
                <td>1</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <th>0</th>
                <td>_C_'s evaluation error</td>
              </tr>
            </table>
          </emu-table>

          <p>_A_ will be rejected with the same error as _C_ since _C_ will call AsyncModuleExecutionRejected on _A_ with _C_'s error. _A_.[[Status]] is set to ~evaluated~. At this point the Promise in _A_.[[TopLevelCapability]] (which was returned from _A_.Evaluate()) is rejected. The fields of the updated module are as given in <emu-xref href="#table-module-graph-cycle-async-fields-8"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-8" class="module-overflow" caption="Module fields after module _A_ is rejected">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                  <th>[[EvaluationError]]</th>
                </tr>
              </thead>
              <tr>
                <th>_A_</th>
                <td>0</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ ¬ª</td>
                <td>0</td>
                <td>_C_'s Evaluation Error</td>
              </tr>
            </table>
          </emu-table>

          <p>Then, _B_ finishes executing without an error. When that happens, AsyncModuleExecutionFulfilled is called again and _B_.[[Status]] is set to ~evaluated~. GatherAvailableAncestors is called on _B_. However, _A_.[[CycleRoot]] is _A_ which has an evaluation error, so it will not be added to the returned _sortedExecList_ and AsyncModuleExecutionFulfilled will return without further processing. Any future importer of _B_ will resolve the rejection of _B_.[[CycleRoot]].[[EvaluationError]] from the evaluation error from _C_ that was set on the cycle root _A_. The fields of the updated modules are as given in <emu-xref href="#table-module-graph-cycle-async-fields-9"></emu-xref>.</p>

          <emu-table id="table-module-graph-cycle-async-fields-9" class="module-overflow" caption="Module fields after module _B_ finishes executing in an erroring graph">
            <table>
              <thead>
                <tr>
                  <th>Module</th>
                  <th>[[DFSIndex]]</th>
                  <th>[[DFSAncestorIndex]]</th>
                  <th>[[Status]]</th>
                  <th>[[AsyncEvaluation]]</th>
                  <th>[[AsyncParentModules]]</th>
                  <th>[[PendingAsyncDependencies]]</th>
                  <th>[[EvaluationError]]</th>
                </tr>
              </thead>
              <tr>
                <th>_A_</th>
                <td>0</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ ¬ª</td>
                <td>0</td>
                <td>_C_'s Evaluation Error</td>
              </tr>
              <tr>
                <th>_B_</th>
                <td>1</td>
                <td>0</td>
                <td>~evaluated~</td>
                <td>*true*</td>
                <td>¬´ _A_ ¬ª</td>
                <td>0</td>
                <td>~empty~</td>
              </tr>
            </table>
          </emu-table>

          <emu-clause id="sec-example-cyclic-module-record-graphs-deferred-imports">
            <h1><ins>Example Cyclic Module Record Graphs with Deferred Imports</ins></h1>

            <p>Deferred imports complicate handling of module graphs, because they allow deferring evaluation of part of the graph while still eagerly evaluating the asynchronous subgraphs of a deferred portion. In this section, deferred imports are marked with dashed arrows and modules using top-level await are marked with <sub><strong>TLA</strong></sub>.</p>

            <p>Consider the following graph, assuming that all the modules have already their [[Status]] set to ~linked~:</p>

            <emu-figure id="figure-module-graph-deferred-simple" caption="A simple module graph with a deferred import">
              <img alt="A module graph in which module A depends on module B with a deferred import, and module B depends on module C" width="121" height="211" src="img/module-graph-deferred-simple.svg">
            </emu-figure>

            <p>Calling _A_.Evaluate() calls InnerModuleEvaluation _A_, which transitions _A_.[[Status]] to ~evaluating~ and then calls InnerAsyncSubgraphsEvaluation on _B_ and _C_, transitioning their status first to ~async-subgraphs-searching~ and then to ~async-subgraphs-evaluated~ without executing them. Then the InnerModuleEvaluation call on _A_ calls _A_.ExecuteModule(): if _A_'s execution triggers _B_.Evaluate(), then InnerModuleEvaluation will be called on _B_ and _C_ executing them and transitioning their [[Status]] to ~evaluated~. Finally, _A_.[[Status]] transitions to ~evaluated~.</p>

            <p>Consider the same graph, but with _C_ using top-level await:</p>

            <emu-figure id="figure-module-graph-deferred-async" caption="A simple module graph with a deferred import and a transitive asynchronous dependency">
              <img alt="A module graph in which module A depends on module B with a deferred import, and module B depends on module C, which uses top-level await." width="121" height="211" src="img/module-graph-deferred-async.svg">
            </emu-figure>

            <p>Calling _A_.Evaluate() calls InnerModuleEvaluation _A_, which transitions _A_.[[Status]] to ~evaluating~ and then calls InnerAsyncSubgraphsEvaluation on _B_, which transitions _B_.[[Status]] to ~async-subgraphs-searching~ and then calls InnerAsyncSubgraphsEvaluation on _C_. Since _C_.[[HasTLA]] is *true*, InnerAsyncSubgraphsEvaluation will call InnerModuleEvaluation on _C_, which transitions _C_.[[Status]] to ~async-evaluating~ and since _C_ has no asynchronous dependencies it performs ExecuteAsyncModule(_C_). This has the effect of transitioning _B_.[[Status]] to ~async-subgraphs-evalauting-async~ and _A_.[[Status]] to ~evalauting-async~. At this point, the fields of the modules are given in <emu-xref href="#table-module-graph-deferred-async-fields-1"></emu-xref>:</p>

            <emu-table id="table-module-graph-deferred-async-fields-1" class="module-overflow" caption="Module fields after the initial Evaluate() call">
              <table>
                <thead>
                  <tr>
                    <th>Module</th>
                    <th>[[Status]]</th>
                    <th>[[AsyncEvaluation]]</th>
                    <th>[[AsyncParentModules]]</th>
                    <th>[[PendingAsyncDependencies]]</th>
                  </tr>
                </thead>
                <tr>
                  <th>_A_</th>
                  <td>~evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ ¬ª</td>
                  <td>1 (_B_)</td>
                </tr>
                <tr>
                  <th>_B_</th>
                  <td>~async-subgraphs-evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ _A_ ¬ª</td>
                  <td>1 (_C_)</td>
                </tr>
                <tr>
                  <th>_C_</th>
                  <td>~evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ _B_ ¬ª</td>
                  <td>0</td>
                </tr>
              </table>
            </emu-table>

            <p>Let us assume that _C_ succesfully finishes evaluating. When that happens, AsyncModuleExecutionFulfilled(_C_) is called, _C_.[[Status]] is set to ~evaluated~, _B_.[[Status]] is set to ~async-subgraphs-evaluated~, _A_.ExecuteModule() is called and upon successful completion _A_.[[Status]] is set to ~evaluted~. The fields of the modules are now as given in <emu-xref href="#table-module-graph-deferred-async-fields-2"></emu-xref>:</p>

            <emu-table id="table-module-graph-deferred-async-fields-2" class="module-overflow" caption="Module fields after _C_ finishes executing">
              <table>
                <thead>
                  <tr>
                    <th>Module</th>
                    <th>[[Status]]</th>
                    <th>[[AsyncEvaluation]]</th>
                    <th>[[AsyncParentModules]]</th>
                    <th>[[PendingAsyncDependencies]]</th>
                  </tr>
                </thead>
                <tr>
                  <th>_A_</th>
                  <td>~evaluated~</td>
                  <td>*true*</td>
                  <td>¬´ ¬ª</td>
                  <td>0</td>
                </tr>
                <tr>
                  <th>_B_</th>
                  <td>~async-subgraphs-evaluated~</td>
                  <td>*true*</td>
                  <td>¬´ _A_ ¬ª</td>
                  <td>0</td>
                </tr>
                <tr>
                  <th>_C_</th>
                  <td>~evaluated~</td>
                  <td>*true*</td>
                  <td>¬´ _B_ ¬ª</td>
                  <td>0</td>
                </tr>
              </table>
            </emu-table>

            <p>If later _B_.Evaluate() is called, then the InnerModuleEvaluation call on _B_ will reset _B_.[[AsyncEvaluation]] to *false* and call InnerModuleEvaluation on _C_. Since at this point _C_.[[Status]] is already ~evaluated~, _B_.ExecuteModule() will be called synchronously and _B_.[[Status]] will synchronously transition to ~evaluated~.</p>

            <p>Alternatively, consider a failure case where _C_ fails to execute with an exception _error_. When that happens, AsyncModuleExecutionRejected(_C_, _error_) is called, it sets _C_.[[Status]] = _B_.[[Status]] = _A_.[[Status]] to ~evaluated~ and _C_.[[EvaluationError]] = _B_.[[EvaluationError]] = _A_.[[EvaluationError]] to ThrowCompletion(_error_). The fields of the modules are this as given in <emu-xref href="#table-module-graph-deferred-async-fields-3"></emu-xref>:</p>

            <emu-table id="table-module-graph-deferred-async-fields-3" class="module-overflow" caption="Module fields after _C_ finishes executing with an exception">
              <table>
                <thead>
                  <tr>
                    <th>Module</th>
                    <th>[[Status]]</th>
                    <th>[[AsyncEvaluation]]</th>
                    <th>[[AsyncParentModules]]</th>
                    <th>[[PendingAsyncDependencies]]</th>
                    <th>[[EvaluationError]]</th>
                  </tr>
                </thead>
                <tr>
                  <th>_A_</th>
                  <td>~evaluated~</td>
                  <td>*true*</td>
                  <td>¬´ ¬ª</td>
                  <td>1 (_B_)</td>
                  <td>_error_</td>
                </tr>
                <tr>
                  <th>_B_</th>
                  <td>~evaluated~</td>
                  <td>*true*</td>
                  <td>¬´ _A_ ¬ª</td>
                  <td>1 (_C_)</td>
                  <td>_error_</td>
                </tr>
                <tr>
                  <th>_C_</th>
                  <td>~evaluated~</td>
                  <td>*true*</td>
                  <td>¬´ _B_ ¬ª</td>
                  <td>0</td>
                  <td>_error_</td>
                </tr>
              </table>
            </emu-table>

            <p>Consider now a similar graph, with an additional dependency of _C_ on _A_, and assume that the evaluation of _A_ calls _B_.Evaluate():</p>

            <emu-figure id="figure-module-graph-deferred-async-cycle-root" caption="A module graph with a deferred import and a cycle back to the root">
              <img alt="A module graph in which module A depends on module B with a deferred import, module B depends on module C, which uses top-level await and depends on A" width="181" height="121" src="img/module-graph-deferred-async-cycle-root.svg">
            </emu-figure>

            <p>As in the previous example, calling _A_.Evaluate() calls InnerModuleEvaluation on _A_, InnerAsyncSubgraphsEvaluation on _B_, and InnerModuleEvaluation on _C_, transitioning their [[Status]] respectively to ~evaluating-async~, ~async-subgraphs-evaluating-async~, and ~evaluating-async~. When InnerModuleEvaluation iterates over _C_'s dependencies, it finds _A_ and sets _A_.[[CycleRoot]] = _B_.[[CycleRoot]] = _C_.[[CycleRoot]] = _A_. At this point, the fields of the modules are given in <emu-xref href="#table-module-graph-deferred-async-cycle-root-fields-1"></emu-xref>:</p>

            <emu-table id="table-module-graph-deferred-async-cycle-root-fields-1" class="module-overflow" caption="Module fields after the initial Evaluate() call">
              <table>
                <thead>
                  <tr>
                    <th>Module</th>
                    <th>[[Status]]</th>
                    <th>[[AsyncEvaluation]]</th>
                    <th>[[AsyncParentModules]]</th>
                    <th>[[PendingAsyncDependencies]]</th>
                    <th>[[CycleRoot]]</th>
                  </tr>
                </thead>
                <tr>
                  <th>_A_</th>
                  <td>~evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ ¬ª</td>
                  <td>1 (_B_)</td>
                  <td>_A_</td>
                </tr>
                <tr>
                  <th>_B_</th>
                  <td>~async-subgraphs-evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ _A_ ¬ª</td>
                  <td>1 (_C_)</td>
                  <td>_A_</td>
                </tr>
                <tr>
                  <th>_C_</th>
                  <td>~evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ _B_ ¬ª</td>
                  <td>0</td>
                  <td>_A_</td>
                </tr>
              </table>
            </emu-table>

            <p>Assume now that _C_ succesfully finishes evaluating. When that happens AsyncModuleExecutionFulfilled(_C_) is called, it sets _C_.[[Status]] to ~evaluated~ and _B_.[[Status]] to ~async-singraphs-evaluated~, and it performs _A_.ExecuteModule(). As stated, _A_'s execution causes a call to _B_.Evaluate(), which calls InnerModuleEvaluation on _B_ and on _C_. Since _C_.[[Status]] is ~evaluated~, _B_'s evaluation must not be blocked by the evaluation of the original cycle that _C_ is part of (_A_), thus InnerModuleEvaluation resets _C_.[[CycleRoot]] to _C_ and returns. InnerModuleEvaluation then synchronously calls _B_.ExecuteModule() and, assuming it completes succesfully, transitions _B_.[[Status]] to ~evaluated~. At this point, the fields of the modules are given in <emu-xref href="#table-module-graph-deferred-async-cycle-root-fields-2"></emu-xref>:</p>

            <emu-table id="table-module-graph-deferred-async-cycle-root-fields-2" class="module-overflow" caption="Module fields after the _B_.ExecuteModule() call">
              <table>
                <thead>
                  <tr>
                    <th>Module</th>
                    <th>[[Status]]</th>
                    <th>[[AsyncEvaluation]]</th>
                    <th>[[AsyncParentModules]]</th>
                    <th>[[PendingAsyncDependencies]]</th>
                    <th>[[CycleRoot]]</th>
                  </tr>
                </thead>
                <tr>
                  <th>_A_</th>
                  <td>~evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ ¬ª</td>
                  <td>0</td>
                  <td>_A_</td>
                </tr>
                <tr>
                  <th>_B_</th>
                  <td>~evaluated~</td>
                  <td>*false*</td>
                  <td>¬´ _A_ ¬ª</td>
                  <td>0</td>
                  <td>_A_</td>
                </tr>
                <tr>
                  <th>_C_</th>
                  <td>~evaluated~</td>
                  <td>*true*</td>
                  <td>¬´ _B_ ¬ª</td>
                  <td>0</td>
                  <td>_C_</td>
                </tr>
              </table>
            </emu-table>

            <p>Once the call to _A_.ExecuteModule() completes, _A_.[[Status]] transitions to ~evaluated~.</p>

            <p>Finally, let us consider the case in which an async module (_C_) eagerly depends on a module whose execution would be otherwise deferred (_B_):</p>

            <emu-figure id="figure-module-graph-deferred-async-cycle-deferred" caption="A module graph with a cycle between a module first imported as deferred and an async module">
              <img alt="A module graph in which module A depends on module B with a deferred import, module B depends on module C, which uses top-level await and depends on B" width="121" height="211" src="img/module-graph-deferred-async-cycle-deferred.svg">
            </emu-figure>

            <p>As in the previous examples, calling _A_.Evaluate() calls InnerModuleEvaluation on _A_, which transitions _A_.[[Status]] to ~evaluating~ and calls InnerAsyncSubgraphsEvaluation on _B_, which transitions _B_.[[Status]] to ~async-subgraphs-searching~, and on _C_. Since _C_.[[HasTLA]] is *true*, InnerAsyncSubgraphsEvaluation then calls InnerModuleEvaluation on _C_, which sets _C_.[[Status]] to ~evaluating~. At this point, the _stack_ shared by the InnerModuleEvaluation and InnerAsyncSubgraphsEvaluation calls is ¬´ _A_, _B_, _C_ ¬ª, and the fields of the modules are given in <emu-xref href="#table-module-graph-deferred-async-cycle-deferred-fields-1"></emu-xref>:</p>

            <emu-table id="table-module-graph-deferred-async-cycle-deferred-fields-1" class="module-overflow" caption="Module fields after the initial evaluation has traversed _A_, _B_, and _C_">
              <table>
                <thead>
                  <tr>
                    <th>Module</th>
                    <th>[[DFSIndex]]</th>
                    <th>[[DFSAncestorIndex]]</th>
                    <th>[[Status]]</th>
                    <th>[[AsyncEvaluation]]</th>
                    <th>[[AsyncParentModules]]</th>
                    <th>[[PendingAsyncDependencies]]</th>
                    <th>[[CycleRoot]]</th>
                  </tr>
                </thead>
                <tr>
                  <th>_A_</th>
                  <td>0</td>
                  <td>0</td>
                  <td>~evaluating~</td>
                  <td>*false*</td>
                  <td>¬´ ¬ª</td>
                  <td>0</td>
                  <td>~empty~</td>
                </tr>
                <tr>
                  <th>_B_</th>
                  <td>1</td>
                  <td>1</td>
                  <td>~async-subgraphs-searching~</td>
                  <td>*false*</td>
                  <td>¬´ ¬ª</td>
                  <td>0</td>
                  <td>~empty~</td>
                </tr>
                <tr>
                  <th>_C_</th>
                  <td>2</td>
                  <td>2</td>
                  <td>~evaluating~</td>
                  <td>*false*</td>
                  <td>¬´ ¬ª</td>
                  <td>0</td>
                  <td>~empty~</td>
                </tr>
              </table>
            </emu-table>

            <p>InnerModuleEvaluation then iterates over _C_'s dependencies, calling InnerModuleEvaluation on _B_: it transitions _B_.[[Status]] from ~async-subgraphs-searching~ to ~evaluating~, it sets _B_.[[DFSIndex]] and _B_.[[DFSAncestorIndex]] to the current _index_, and _stack_ becomes ¬´ _A_, _B_, _C_, _B_ ¬ª. Note that _stack_ contains _B_ twice: this only happens when a module is first visited setting its [[Status]] to ~async-subgraphs-searching~, and then due to a cycle it's visited again setting its [[Status]] to ~evaluating~. This behaviour is equivalent to the case in which _C_ depends on a <em>different</em> module <var>B'</var>, which has not been visited yet, and which circularly depends on _C_:</p>

            <emu-figure id="figure-module-graph-deferred-async-cycle-deferred-2" caption="A module graph with a deferred module that depends on a cycle whose root is an async module">
              <img alt="A module graph in which module A depends on module B with a deferred import, module B depends on module C, which uses top-level await and circularly depends on a module B'" width="181" height="211" src="img/module-graph-deferred-async-cycle-deferred-2.svg">
            </emu-figure>

            <p>When then iterating over _B_/<var>B'</var>'s dependencies, InnerModuleEvaluation iterates over _C_ whose [[Status]] is ~evaluating~, and thus sets _B_/<var>B'</var>.[[DFSAncestorIndex]] to _C_.[[DFSAncestorIndex]]. Then, it calls _B_/<var>B'</var>.ExecuteModule(), sets _B_/<var>B'</var>.[[Status]] to ~evaluated~ and gives back control to the InnerModuleEvaluation call on _C_. It performs ExecuteAsyncModule(_C_) and sets _C_.[[Status]] to ~evaluating-async~, removes the second _B_ and _C_ from the _stack_ and sets their [[CycleRoot]] to _C_. Then it removes the first _B_ from the _stack_, since its [[Status]] is already _evaluated_. The InnerModuleEvaluation call on _A_ then updates _A_'s fields related to the asynchronous execution of its dependencies, and appends _A_ to _B_.[[CycleRoot]].[[AsyncParentModules]]. At this point, _stack_ is empty and the fields of the modules are given in <emu-xref href="#table-module-graph-deferred-async-cycle-deferred-fields-2"></emu-xref>:</p>

            <emu-table id="table-module-graph-deferred-async-cycle-deferred-fields-2" class="module-overflow" caption="Module fields after the first Evaluate() call">
              <table>
                <thead>
                  <tr>
                    <th>Module</th>
                    <th>[[DFSIndex]]</th>
                    <th>[[DFSAncestorIndex]]</th>
                    <th>[[Status]]</th>
                    <th>[[AsyncEvaluation]]</th>
                    <th>[[AsyncParentModules]]</th>
                    <th>[[PendingAsyncDependencies]]</th>
                    <th>[[CycleRoot]]</th>
                  </tr>
                </thead>
                <tr>
                  <th>_A_</th>
                  <td>0</td>
                  <td>0</td>
                  <td>~evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ ¬ª</td>
                  <td>1 (_C_)</td>
                  <td>~empty~</td>
                </tr>
                <tr>
                  <th>_B_</th>
                  <td>3</td>
                  <td>2</td>
                  <td>~evaluated~</td>
                  <td>*false*</td>
                  <td>¬´ ¬ª</td>
                  <td>0</td>
                  <td>_C_</td>
                </tr>
                <tr>
                  <th>_C_</th>
                  <td>2</td>
                  <td>2</td>
                  <td>~evaluating-async~</td>
                  <td>*true*</td>
                  <td>¬´ _A_ ¬ª</td>
                  <td>0</td>
                  <td>_C_</td>
                </tr>
              </table>
            </emu-table>

            <p>When _C_ finishes evaluating AsyncModuleExecutionFulfilled(_C_) is called, transitioning its status to ~evaluated~ and calling _A_.ExecuteModule().</p>
          </emu-clause>
        </emu-clause>
      </emu-clause>

      <emu-clause id="sec-source-text-module-records">
        <h1>Source Text Module Records</h1>

        <p>The following definitions specify the required concrete methods and other abstract operations for Source Text Module Records</p>

        <emu-clause id="sec-resolveexport" type="concrete method" number="3">
          <h1>
            ResolveExport (
              _exportName_: a String,
              optional _resolveSet_: a List of Records with fields [[Module]] (a Module Record) and [[ExportName]] (a String),
            ): a ResolvedBinding Record, *null*, or ~ambiguous~
          </h1>
          <dl class="header">
            <dt>for</dt>
            <dd>a Source Text Module Record _module_</dd>

            <dt>description</dt>
            <dd>
              <p>ResolveExport attempts to resolve an imported binding to the actual defining module and local binding name. The defining module may be the module represented by the Module Record this method was invoked on or some other module that is imported by that module. The parameter _resolveSet_ is used to detect unresolved circular import/export paths. If a pair consisting of specific Module Record and _exportName_ is reached that is already in _resolveSet_, an import circularity has been encountered. Before recursively calling ResolveExport, a pair consisting of _module_ and _exportName_ is added to _resolveSet_.</p>
              <p>If a defining module is found, a ResolvedBinding Record { [[Module]], [[BindingName]] } is returned. This record identifies the resolved binding of the originally requested export, unless this is the export of a namespace with no local binding. In this case, [[BindingName]] will be set to ~namespace~. If no definition was found or the request is found to be circular, *null* is returned. If the request is found to be ambiguous, ~ambiguous~ is returned.</p>
            </dd>
          </dl>

          <emu-alg>
            1. Assert: _module_.[[Status]] is not ~new~.
            1. If _resolveSet_ is not present, set _resolveSet_ to a new empty List.
            1. For each Record { [[Module]], [[ExportName]] } _r_ of _resolveSet_, do
              1. If _module_ and _r_.[[Module]] are the same Module Record and SameValue(_exportName_, _r_.[[ExportName]]) is *true*, then
                1. Assert: This is a circular import request.
                1. Return *null*.
            1. Append the Record { [[Module]]: _module_, [[ExportName]]: _exportName_ } to _resolveSet_.
            1. For each ExportEntry Record _e_ of _module_.[[LocalExportEntries]], do
              1. If SameValue(_exportName_, _e_.[[ExportName]]) is *true*, then
                1. Assert: _module_ provides the direct binding for this export.
                1. Return ResolvedBinding Record { [[Module]]: _module_, [[BindingName]]: _e_.[[LocalName]] }.
            1. For each ExportEntry Record _e_ of _module_.[[IndirectExportEntries]], do
              1. If SameValue(_exportName_, _e_.[[ExportName]]) is *true*, then
                1. Let _importedModule_ be GetImportedModule(_module_, _e_.[[ModuleRequest]]).
                1. If _e_.[[ImportName]] is ~all~, then
                  1. Assert: _module_ does not provide the direct binding for this export.
                  1. Return ResolvedBinding Record { [[Module]]: _importedModule_, [[BindingName]]: ~namespace~ }.
                1. Else,
                  1. Assert: _module_ imports a specific binding for this export.
                  1. Return _importedModule_.ResolveExport(_e_.[[ImportName]], _resolveSet_).
            1. If SameValue(_exportName_, *"default"*) is *true*, then
              1. Assert: A `default` export was not explicitly defined by this module.
              1. Return *null*.
              1. NOTE: A `default` export cannot be provided by an `export * from "mod"` declaration.
            1. Let _starResolution_ be *null*.
            1. For each ExportEntry Record _e_ of _module_.[[StarExportEntries]], do
              1. Let _importedModule_ be GetImportedModule(_module_, _e_.[[ModuleRequest]]).
              1. Let _resolution_ be _importedModule_.ResolveExport(_exportName_, _resolveSet_).
              1. If _resolution_ is ~ambiguous~, return ~ambiguous~.
              1. If _resolution_ is not *null*, then
                1. Assert: _resolution_ is a ResolvedBinding Record.
                1. If _starResolution_ is *null*, set _starResolution_ to _resolution_.
                1. Else,
                  1. Assert: There is more than one `*` import that includes the requested name.
                  1. If _resolution_.[[Module]] and _starResolution_.[[Module]] are not the same Module Record, return ~ambiguous~.
                  1. If _resolution_.[[BindingName]] is not _starResolution_.[[BindingName]] and either _resolution_.[[BindingName]] or _starResolution_.[[BindingName]] is ~namespace~, return ~ambiguous~.
                  1. If _resolution_.[[BindingName]] is a String, _starResolution_.[[BindingName]] is a String, and SameValue(_resolution_.[[BindingName]], _starResolution_.[[BindingName]]) is *false*, return ~ambiguous~.
            1. Return _starResolution_.
          </emu-alg>
        </emu-clause>

        <emu-clause id="sec-source-text-module-record-initialize-environment" type="concrete method">
          <h1>InitializeEnvironment ( ): either a normal completion containing ~unused~ or a throw completion</h1>
          <dl class="header">
            <dt>for</dt>
            <dd>a Source Text Module Record _module_</dd>
          </dl>

          <emu-alg>
            1. For each ExportEntry Record _e_ of _module_.[[IndirectExportEntries]], do
              1. Let _resolution_ be _module_.ResolveExport(_e_.[[ExportName]]).
              1. If _resolution_ is either *null* or ~ambiguous~, throw a *SyntaxError* exception.
              1. Assert: _resolution_ is a ResolvedBinding Record.
            1. Assert: All named exports from _module_ are resolvable.
            1. Let _realm_ be _module_.[[Realm]].
            1. Assert: _realm_ is not *undefined*.
            1. Let _env_ be NewModuleEnvironment(_realm_.[[GlobalEnv]]).
            1. Set _module_.[[Environment]] to _env_.
            1. For each ImportEntry Record _in_ of _module_.[[ImportEntries]], do
              1. Let _importedModule_ be GetImportedModule(_module_, _in_.[[ModuleRequest]]).
              1. If _in_.[[ImportName]] is ~namespace-object~, then
                1. Let _namespace_ be GetModuleNamespace(_importedModule_).
                1. Perform ! _env_.CreateImmutableBinding(_in_.[[LocalName]], *true*).
                1. Perform ! _env_.InitializeBinding(_in_.[[LocalName]], _namespace_).
              1. Else,
                1. Let _resolution_ be _importedModule_.ResolveExport(_in_.[[ImportName]]).
                1. If _resolution_ is either *null* or ~ambiguous~, throw a *SyntaxError* exception.
                1. If _resolution_.[[BindingName]] is ~namespace~, then
                  1. Let _namespace_ be GetModuleNamespace(_resolution_.[[Module]]).
                  1. Perform ! _env_.CreateImmutableBinding(_in_.[[LocalName]], *true*).
                  1. Perform ! _env_.InitializeBinding(_in_.[[LocalName]], _namespace_).
                1. Else,
                  1. Perform _env_.CreateImportBinding(_in_.[[LocalName]], _resolution_.[[Module]], _resolution_.[[BindingName]]).
            1. Let _moduleContext_ be a new ECMAScript code execution context.
            1. Set the Function of _moduleContext_ to *null*.
            1. Assert: _module_.[[Realm]] is not *undefined*.
            1. Set the Realm of _moduleContext_ to _module_.[[Realm]].
            1. Set the ScriptOrModule of _moduleContext_ to _module_.
            1. Set the VariableEnvironment of _moduleContext_ to _module_.[[Environment]].
            1. Set the LexicalEnvironment of _moduleContext_ to _module_.[[Environment]].
            1. Set the PrivateEnvironment of _moduleContext_ to *null*.
            1. Set _module_.[[Context]] to _moduleContext_.
            1. Push _moduleContext_ onto the execution context stack; _moduleContext_ is now the running execution context.
            1. Let _code_ be _module_.[[ECMAScriptCode]].
            1. Let _varDeclarations_ be the VarScopedDeclarations of _code_.
            1. Let _declaredVarNames_ be a new empty List.
            1. For each element _d_ of _varDeclarations_, do
              1. For each element _dn_ of the BoundNames of _d_, do
                1. If _declaredVarNames_ does not contain _dn_, then
                  1. Perform ! _env_.CreateMutableBinding(_dn_, *false*).
                  1. Perform ! _env_.InitializeBinding(_dn_, *undefined*).
                  1. Append _dn_ to _declaredVarNames_.
            1. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _code_.
            1. Let _privateEnv_ be *null*.
            1. For each element _d_ of _lexDeclarations_, do
              1. For each element _dn_ of the BoundNames of _d_, do
                1. If IsConstantDeclaration of _d_ is *true*, then
                  1. Perform ! _env_.CreateImmutableBinding(_dn_, *true*).
                1. Else,
                  1. Perform ! _env_.CreateMutableBinding(_dn_, *false*).
                1. If _d_ is either a |FunctionDeclaration|, a |GeneratorDeclaration|, an |AsyncFunctionDeclaration|, or an |AsyncGeneratorDeclaration|, then
                  1. Let _fo_ be InstantiateFunctionObject of _d_ with arguments _env_ and _privateEnv_.
                  1. Perform ! _env_.InitializeBinding(_dn_, _fo_).
            1. Remove _moduleContext_ from the execution context stack.
            1. Return ~unused~.
          </emu-alg>
        </emu-clause>
      </emu-clause>
    </emu-clause>

    <emu-clause id="sec-imports">
      <h1>Imports</h1>
      <h2>Syntax</h2>
      <emu-grammar type="definition">
        ImportDeclaration :
          `import` <ins>`defer`?</ins> ImportClause FromClause `;`
          `import` ModuleSpecifier `;`

        ImportClause :
          ImportedDefaultBinding
          NameSpaceImport
          NamedImports
          ImportedDefaultBinding `,` NameSpaceImport
          ImportedDefaultBinding `,` NamedImports

        ImportedDefaultBinding :
          ImportedBinding

        NameSpaceImport :
          `*` `as` ImportedBinding

        NamedImports :
          `{` `}`
          `{` ImportsList `}`
          `{` ImportsList `,` `}`

        FromClause :
          `from` ModuleSpecifier

        ImportsList :
          ImportSpecifier
          ImportsList `,` ImportSpecifier

        ImportSpecifier :
          ImportedBinding
          ModuleExportName `as` ImportedBinding

        ModuleSpecifier :
          StringLiteral

        ImportedBinding :
          BindingIdentifier[~Yield, +Await]
      </emu-grammar>

      <emu-clause id="sec-imports-static-semantics-early-errors">
        <h1>Static Semantics: Early Errors</h1>
        <emu-grammar>ModuleItem : ImportDeclaration</emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if the BoundNames of |ImportDeclaration| contains any duplicate entries.
          </li>
        </ul>

        <emu-grammar><ins>ImportDeclaration : `import` `defer` ImportClause FromClause `;`</ins></emu-grammar>
        <ul>
          <li>
            <ins>It is a Syntax Error if |ImportClause| is not |NameSpaceImport|.</ins>
          </li>
        </ul>
      </emu-clause>

      <emu-clause id="sec-static-semantics-importentries" oldids="sec-module-semantics-static-semantics-importentries,sec-imports-static-semantics-importentries" type="sdo">
        <h1>Static Semantics: ImportEntries ( ): a List of ImportEntry Records</h1>
        <dl class="header">
        </dl>
        <emu-grammar>Module : [empty]</emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
        <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>
        <emu-alg>
          1. Let _entries1_ be ImportEntries of |ModuleItemList|.
          1. Let _entries2_ be ImportEntries of |ModuleItem|.
          1. Return the list-concatenation of _entries1_ and _entries2_.
        </emu-alg>
        <emu-grammar>
          ModuleItem :
            ExportDeclaration
            StatementListItem
        </emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
        <emu-grammar>ImportDeclaration : `import` ImportClause FromClause `;`</emu-grammar>
        <emu-alg>
          1. Let _module_ be <del>the sole element of ModuleRequests</del><ins>SV</ins> of |FromClause|.
          1. Return ImportEntriesForModule of |ImportClause| with arguments _module_ <ins>and ~full~</ins>.
        </emu-alg>
        <emu-grammar><ins>ImportDeclaration : `import` `defer` ImportClause FromClause `;`</ins></emu-grammar>
        <emu-alg>
          1. <ins>Let _module_ be SV of |FromClause|.</ins>
          1. <ins>Return ImportEntriesForModule of |ImportClause| with arguments _module_ and ~defer~.</ins>
        </emu-alg>
        <emu-grammar>ImportDeclaration : `import` ModuleSpecifier `;`</emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-static-semantics-importentriesformodule" type="sdo">
        <h1>
          Static Semantics: ImportEntriesForModule (
            _module_: a String,
            <ins>_phase_: ~defer~ or ~full~,</ins>
          ): a List of ImportEntry Records
        </h1>
        <dl class="header">
        </dl>
        <emu-grammar>ImportClause : ImportedDefaultBinding `,` NameSpaceImport</emu-grammar>
        <emu-alg>
          1. Let _entries1_ be ImportEntriesForModule of |ImportedDefaultBinding| with arguments _module_ <ins>and _phase_</ins>.
          1. Let _entries2_ be ImportEntriesForModule of |NameSpaceImport| with arguments _module_ <ins>and _phase_</ins>.
          1. Return the list-concatenation of _entries1_ and _entries2_.
        </emu-alg>
        <emu-grammar>ImportClause : ImportedDefaultBinding `,` NamedImports</emu-grammar>
        <emu-alg>
          1. Let _entries1_ be ImportEntriesForModule of |ImportedDefaultBinding| with arguments _module_ <ins>and _phase_</ins>.
          1. Let _entries2_ be ImportEntriesForModule of |NamedImports| with arguments _module_ <ins>and _phase_</ins>.
          1. Return the list-concatenation of _entries1_ and _entries2_.
        </emu-alg>
        <emu-grammar>ImportedDefaultBinding : ImportedBinding</emu-grammar>
        <emu-alg>
          1. <ins>Assert: _phase_ is ~full~.</ins>
          1. Let _localName_ be the sole element of BoundNames of |ImportedBinding|.
          1. Let _defaultEntry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, <ins>[[Phase]]: _phase_,</ins> [[ImportName]]: *"default"*, [[LocalName]]: _localName_ }.
          1. Return ¬´ _defaultEntry_ ¬ª.
        </emu-alg>
        <emu-grammar>NameSpaceImport : `*` `as` ImportedBinding</emu-grammar>
        <emu-alg>
          1. Let _localName_ be the StringValue of |ImportedBinding|.
          1. Let _entry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, <ins>[[Phase]]: _phase_,</ins> [[ImportName]]: ~namespace-object~, [[LocalName]]: _localName_ }.
          1. Return ¬´ _entry_ ¬ª.
        </emu-alg>
        <emu-grammar>NamedImports : `{` `}`</emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
        <emu-grammar>ImportsList : ImportsList `,` ImportSpecifier</emu-grammar>
        <emu-alg>
          1. <ins>Assert: _phase_ is ~full~.</ins>
          1. Let _specs1_ be the ImportEntriesForModule of |ImportsList| with arguments _module_ <ins>and _phase_</ins>.
          1. Let _specs2_ be the ImportEntriesForModule of |ImportSpecifier| with arguments _module_ <ins>and _phase_</ins>.
          1. Return the list-concatenation of _specs1_ and _specs2_.
        </emu-alg>
        <emu-grammar>ImportSpecifier : ImportedBinding</emu-grammar>
        <emu-alg>
          1. <ins>Assert: _phase_ is ~full~.</ins>
          1. Let _localName_ be the sole element of BoundNames of |ImportedBinding|.
          1. Let _entry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, <ins>[[Phase]]: _phase_,</ins> [[ImportName]]: _localName_, [[LocalName]]: _localName_ }.
          1. Return ¬´ _entry_ ¬ª.
        </emu-alg>
        <emu-grammar>ImportSpecifier : ModuleExportName `as` ImportedBinding</emu-grammar>
        <emu-alg>
          1. <ins>Assert: _phase_ is ~full~.</ins>
          1. Let _importName_ be the StringValue of |ModuleExportName|.
          1. Let _localName_ be the StringValue of |ImportedBinding|.
          1. Let _entry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, <ins>[[Phase]]: _phase_,</ins> [[ImportName]]: _importName_, [[LocalName]]: _localName_ }.
          1. Return ¬´ _entry_ ¬ª.
        </emu-alg>
      </emu-clause>
    </emu-clause>

    <emu-clause id="sec-exports">
      <h1>Exports</h1>

      <emu-clause id="sec-static-semantics-exportentries" type="sdo" number="4">
        <h1>Static Semantics: ExportEntries ( ): a List of ExportEntry Records</h1>
        <dl class="header">
        </dl>
        <emu-grammar>Module : [empty]</emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
        <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>
        <emu-alg>
          1. Let _entries1_ be ExportEntries of |ModuleItemList|.
          1. Let _entries2_ be ExportEntries of |ModuleItem|.
          1. Return the list-concatenation of _entries1_ and _entries2_.
        </emu-alg>
        <emu-grammar>
          ModuleItem :
            ImportDeclaration
            StatementListItem
        </emu-grammar>
        <emu-alg>
          1. Return a new empty List.
        </emu-alg>
        <emu-grammar>ExportDeclaration : `export` ExportFromClause FromClause `;`</emu-grammar>
        <emu-alg>
          1. Let _module_ be <del>the sole element of ModuleRequests</del><ins>SV</ins> of |FromClause|.
          1. Return ExportEntriesForModule of |ExportFromClause| with argument _module_.
        </emu-alg>
        <emu-grammar>ExportDeclaration : `export` NamedExports `;`</emu-grammar>
        <emu-alg>
          1. Return ExportEntriesForModule of |NamedExports| with argument *null*.
        </emu-alg>
        <emu-grammar>ExportDeclaration : `export` VariableStatement</emu-grammar>
        <emu-alg>
          1. Let _entries_ be a new empty List.
          1. Let _names_ be the BoundNames of |VariableStatement|.
          1. For each element _name_ of _names_, do
            1. Append the ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _name_, [[ExportName]]: _name_ } to _entries_.
          1. Return _entries_.
        </emu-alg>
        <emu-grammar>ExportDeclaration : `export` Declaration</emu-grammar>
        <emu-alg>
          1. Let _entries_ be a new empty List.
          1. Let _names_ be the BoundNames of |Declaration|.
          1. For each element _name_ of _names_, do
            1. Append the ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _name_, [[ExportName]]: _name_ } to _entries_.
          1. Return _entries_.
        </emu-alg>
        <emu-grammar>ExportDeclaration : `export` `default` HoistableDeclaration</emu-grammar>
        <emu-alg>
          1. Let _names_ be BoundNames of |HoistableDeclaration|.
          1. Let _localName_ be the sole element of _names_.
          1. Return a List whose sole element is a new ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _localName_, [[ExportName]]: *"default"* }.
        </emu-alg>
        <emu-grammar>ExportDeclaration : `export` `default` ClassDeclaration</emu-grammar>
        <emu-alg>
          1. Let _names_ be BoundNames of |ClassDeclaration|.
          1. Let _localName_ be the sole element of _names_.
          1. Return a List whose sole element is a new ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _localName_, [[ExportName]]: *"default"* }.
        </emu-alg>
        <emu-grammar>ExportDeclaration : `export` `default` AssignmentExpression `;`</emu-grammar>
        <emu-alg>
          1. Let _entry_ be the ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: *"\*default\*"*, [[ExportName]]: *"default"* }.
          1. Return ¬´ _entry_ ¬ª.
        </emu-alg>
        <emu-note>
          <p>*"\*default\*"* is used within this specification as a synthetic name for anonymous default export values. See <emu-xref href="#note-star-default-star">this note</emu-xref> for more details.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>
